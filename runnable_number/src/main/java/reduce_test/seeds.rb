DatabaseCleaner.clean_with(:truncation)

Testcase.create(:name => "Collector91_140_4_19.java", :java => "//https://searchcode.com/file/100948350/Mapreduce/Programs/MyChainMapper.java#l-65\n\n\tpublic void reduce(Text key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<Text, LongWritable> collect, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\tlong sum = 0;\n\t\twhile(values.hasNext())\n\t\t{\n\t\t\tsum = sum + values.next().get();\n\t\t}\n\t\tcollect.collect(key, new LongWritable(sum));\n\t}\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "Text", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_32_2.java", :java => "//https://searchcode.com/file/112450989/src/main/java/ru/sgu/csit/spec/hadoop/pagerank/DoubleSumCombiner.java#l-5\n\n\tpublic void reduce(Text key, Iterable<DoubleWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tdouble sum = 1.0 - D;\n\t\tfor (DoubleWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tresult.set(sum);\n\n\t\tcontext.write(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context201_270_28_6.java", :java => "//https://searchcode.com/file/74337084/mapreduce-lab/solved/src/fr/eurecom/dsg/mapreduce/WordCountComplex.java#l-19\n\n\tpublic void reduce(Text text, Iterable<IntWritable> iterable, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint result = 0;\n\n\t\tfor (IntWritable iterator : iterable)\n\t\t\tresult += iterator.get();\n\n\t\tcontext.write(text, new IntWritable(result));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector141_200_9_2.java", :java => "//https://searchcode.com/file/65662153/src/dist/edu/umd/cloud9/collection/trec/NumberTrecDocuments.java#l-2\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\toutput.collect(key, cnt);\n\t\tcnt.set(cnt.get() + 1);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context361_530_2_18.java", :java => "//https://searchcode.com/file/77165600/src/test/mapred/org/apache/hadoop/mapreduce/lib/join/TestJoinDatamerge.java#l-35\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\t\tint seen = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tseen += value.get();\n\t\t}\n\t\t//assertTrue(\"Bad count for \" + key.get(), verify(key.get(), seen));\n\t\t//assertTrue(\"Bad count for \" + key.get(), verify(key.get(), seen));\n\n\t\tcontext.write(key, new IntWritable(seen));\n\t}\n\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context361_530_1_6_2.java", :java => "//https://searchcode.com/file/100327042/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/TestMapReduce.java#l-39\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> it,\n\t\t\tContext context) throws IOException, InterruptedException {\n\t\tint keyint = key.get();\n\t\tint count = 0;\n\t\tfor (IntWritable iw : it) {\n\t\t\tcount++;\n\t\t}\n\t\tcontext.write(new IntWritable(keyint), new IntWritable(count));\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_32_1.java", :java => "//https://searchcode.com/file/112450978/src/main/java/ru/sgu/csit/spec/hadoop/pagerank/DoubleSumReducer.java#l-14\n\n\tpublic void reduce(Text key, Iterable<DoubleWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tdouble sum = 1.0 - D;\n\t\tfor (DoubleWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tresult.set(sum);\n\n\t\tcontext.write(result, key);\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_9_13.java", :java => "//https://searchcode.com/file/65836069/src/example/twitter/ParseHashtags.java#l-11\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values)\n\t\t\tsum += val.get();\n\t\tcontext.write(key, new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_12_18.java", :java => "//https://searchcode.com/file/2505952/examples/world_development_indicators/src/main/java/com/mongodb/hadoop/examples/world_development/WorldDevIndicatorReducer.java#l-34\n\n\tpublic void reduce(Text pCountryCode, final Iterable<DoubleWritable> pValues,\n\t\t\tfinal Context pContext )\n\t\t\t\t\tthrows IOException, InterruptedException{\n\t\tdouble count = 0;\n\t\tdouble sum = 0;\n\t\tfor ( final DoubleWritable value : pValues ){\n\t\t\tsum += value.get();\n\t\t\tcount++;\n\t\t}\n\n\t\tfinal double avg = sum / count;\n\n\t\tpContext.write( pCountryCode, new DoubleWritable( avg ) );\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context39_141_200_1_1_2.java", :java => "//https://searchcode.com/file/93068483/src/mapred/org/apache/hadoop/mapreduce/Reducer.java#l-19\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context\n\t\t\t) throws IOException, InterruptedException {\n\t\tfor(IntWritable value: values) {\n\t\t\tcontext.write((Text) key, (IntWritable) value);\n\t\t}\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context20_0_90_11_15.java", :java => "//https://searchcode.com/file/8195359/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/reduce/IntSumReducer.java#l-19\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values, \n\t\t\tContext context) throws IOException, InterruptedException {\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector11_0_90_6_4.java", :java => "//https://searchcode.com/file/93068126/src/mapred/org/apache/hadoop/mapred/lib/IdentityReducer.java#l-27\n\n\tpublic void reduce(LongWritable key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<LongWritable, LongWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\twhile (values.hasNext()) {\n\t\t\toutput.collect(key, values.next());\n\t\t}\n\t}\n\n", :t1 => "LongWritable", :t2 => "LongWritable", :t3 => "LongWritable", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "collector91_140_1_11.java", :java => "//https://searchcode.com/file/99975914/hw2/Li_Lullo_Martin_exercise2.java#l-16\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values, OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n\t\tdouble stdDev = 0;\n\t\tdouble sumSqr = 0;\n\t\tdouble count = 0;\n\t\tdouble mean = 0;\n\t\tdouble sum = 0;\n\t\twhile(values.hasNext()){\n\t\t\tdouble value = values.next().get();\n\t\t\tsumSqr += value*value;\n\t\t\tsum += value;\n\t\t\tcount++;\n\t\t}\n\t\tmean = sum/count;\n\t\tstdDev = Math.sqrt((sumSqr-count*mean*mean)/count);\n\t\toutput.collect(key, new DoubleWritable(stdDev));\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector")
Testcase.create(:name => "Collector36_141_200_7_7.java", :java => "//https://searchcode.com/file/110287814/src/test/mapred/org/apache/hadoop/mapred/TestJavaSerialization.java#l-53\n\n\tpublic void reduce(LongWritable key, Iterator<Long> values,\n\t        OutputCollector<LongWritable, Long> output, Reporter reporter)\n\t      throws IOException {\n\n\t      long sum = 0;\n\t      while (values.hasNext()) {\n\t        sum += values.next();\n\t      }\n\t      output.collect(key, sum);\n\t    }\n", :t1 => "LongWritable", :t2 => "Long", :t3 => "LongWritable", :t4 => "Long", :r_type => "Collector")
Testcase.create(:name => "context141_200_13_8.java", :java => "//https://searchcode.com/file/100327083/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/TestNewCombinerGrouping.java#l-28\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values,\n\t\t\tContext context)\n\t\t\t\t\tthrows IOException, InterruptedException {\n\t\tLongWritable maxValue = null;\n\t\tfor (LongWritable value : values) {\n\t\t\tif (maxValue == null) {\n\t\t\t\tmaxValue = value;\n\t\t\t} else if (value.compareTo(maxValue) > 0) {\n\t\t\t\tmaxValue = value;\n\t\t\t}\n\t\t}\n\t\tcontext.write(key, maxValue);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_25_3.java", :java => "//https://searchcode.com/file/70647354/MRDP/src/main/java/mrdp/ch6/ParallelJobs.java#l-11\n\n\tpublic void reduce(Text key, Iterable<DoubleWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\n\t\tdouble sum = 0.0;\n\t\tdouble count = 0;\n\t\tfor (DoubleWritable dw : values) {\n\t\t\tsum += dw.get();\n\t\t\t++count;\n\t\t}\n\n\t\toutvalue.set(sum / count);\n\t\tcontext.write(key, outvalue);\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context201_270_5_18.java", :java => "//https://searchcode.com/file/68443511/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/WordMedian.java#l-34\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tval.set(sum);\n\t\tcontext.write(key, val);\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_1_9.java", :java => "//https://searchcode.com/file/99975954/hw1/Fox_Martin_exercise1.java#l-11\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\tint maxTemp = 0;\n\t\twhile(values.hasNext()){\n\t\t\tint nextTemp = values.next().get();\n\t\t\tif (nextTemp > maxTemp)\n\t\t\t\tmaxTemp = nextTemp;\n\t\t}\n\t\toutput.collect(key, new IntWritable(maxTemp));\n\t}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "Collector141_200_1_17.java", :java => "//https://searchcode.com/file/100326439/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestOldCombinerGrouping.java#l-56\n\n\tpublic void reduce(Text key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<Text, LongWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\tLongWritable maxValue = null;\n\t\twhile (values.hasNext()) {\n\t\t\tLongWritable value = values.next();\n\t\t\tif (maxValue == null) {\n\t\t\t\tmaxValue = value;\n\t\t\t} else if (value.compareTo(maxValue) > 0) {\n\t\t\t\tmaxValue = value;\n\t\t\t}\n\t\t}\n\t\toutput.collect(key, maxValue);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "Text", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context91_140_6_1.java", :java => "//https://searchcode.com/file/100948405/Mapreduce/Programs/StocksMinMaxOHLC.java#l-11\n\n\t\t\tpublic void reduce(Text key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException\n\t\t\t{\n\t\t\t\tdouble min = Double.MAX_VALUE;\n\t\t\t\tdouble max = 0.0;\n\t\t\t\tfor(DoubleWritable value : values)\n\t\t\t\t{\n\t\t\t\t\tdouble current = value.get();\n\t\t\t\t\tmax = (max>current)?max:current;\n\t\t\t\t\tmin = (min<current)?min:current;\n\t\t\t\t}\n\t\t\t\tvword.set(\"Min: \" + min + \"\tMax: \" + max);\n\t\t\t\tcontext.write(key, vword);\n\t\t\t}\n\t\t\t\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector5_0_90_2_18.java", :java => "//https://searchcode.com/file/110743700/src/mapred/org/apache/hadoop/mapred/lib/LongSumReducer.java#l-31\n\n\tpublic void reduce(LongWritable key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<LongWritable, LongWritable> output,\n\t\t\tReporter reporter)\n\t\t\t\t\tthrows IOException {\n\n\t\t// sum all values for this key\n\t\t// sum all values for this key\n\n\t\tlong sum = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\n\t\t// output sum\n\t\t// output sum\n\n\t\toutput.collect(key, new LongWritable(sum));\n\t}\n\n", :t1 => "LongWritable", :t2 => "LongWritable", :t3 => "LongWritable", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_7_19.java", :java => "//https://searchcode.com/file/98860610/lession9/RecordlkpReduce.java#l-12\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\tSystem.out.println(\"Reducers Sort and Shuffle Merge Brings keys Over HTTP\"+ key +\" and there  Values  our case its <key> <v1> <v1> each being 1 \" );\n\n\t\tfor (IntWritable value : values)\n\t\t{\n\t\t\tcontext.write(key, value);\n\t\t}\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_9_11.java", :java => "//https://searchcode.com/file/65663873/src/dist/edu/umd/cloud9/example/bigram/BigramCount.java#l-31\n\n\t// Reuse objects\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\tthrows IOException, InterruptedException {\n\t\t// sum up values\n\t\t// sum up values\n\n\t\tint sum = 0;\n\t\tIterator<IntWritable> iter = values.iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tsum += iter.next().get();\n\t\t}\n\t\tsumWritable.set(sum);\n\t\tcontext.write(key, sumWritable);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_2_18.java", :java => "//https://searchcode.com/file/100948332/Mapreduce/StockTotalVolume.java#l-34\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tlong sum = 0;\n\t\tfor(LongWritable value : values)\n\t\t{\n\t\t\tsum = sum + value.get();\n\t\t}\n\t\tString country = \"country\";\n\t\tString record = country + \": \" + key.toString(); \n\t\tcontext.write(new Text(record), new LongWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_8_1.java", :java => "//https://searchcode.com/file/98860673/HelloMR/WordCountReduce.java#l-13\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\tSystem.out.println(\"Reducers Sort and Shuffle Merge Brings keys Over HTTP\"+ key +\" and there  Values  our case its <key> <v1> <v1> each being 1 \" );\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_4_11.java", :java => "//https://searchcode.com/file/100948394/Mapreduce/Programs/MapReduceProfiler.java#l-8\n\n\t  public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n      {\n        long sum = 0;\n        for(LongWritable value : values)\n        {\n            sum = sum + value.get();\n        }\n        context.write(key, new LongWritable(sum));\n      }\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_13_6.java", :java => "//https://searchcode.com/file/96335780/src/TriangleFriendship.java#l-13\n\n\t  public void reduce(Text key, Iterable<LongWritable> values,\n\t\t\t\tContext context) throws IOException, InterruptedException {\n\t\t\tIterator<LongWritable> iter = values.iterator();\n\t\t\tint sum = 0;\n\t\t\twhile(iter.hasNext()) {\n\t\t\t\tsum += iter.next().get();\n\t\t\t}\n\t\t\tif(sum == 3) { // Output if it has 3 edges\n\t\t\tif(sum == 3) { // Output if it has 3 edges\n\n\t\t\t\tcontext.write(key, null);\n\t\t\t}\n\t\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_4_7.java", :java => "//https://searchcode.com/file/100948353/Mapreduce/Programs/CalculateAverageMovieRating.java#l-9\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tfloat ratingAvg = 0.0f;\n\t\tlong sum = 0;\n\t\tint counter = 0;\n\t\tfor(LongWritable value : values)\n\t\t{\n\t\t\tcounter++;\n\t\t\tsum = sum + value.get();\n\t\t}\n\t\tratingAvg = (float) (sum / counter);\n\t\tvword.set(ratingAvg);\n\t\tcontext.write(key, vword);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context361_530_1_6_1.java", :java => "//https://searchcode.com/file/100327042/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/TestMapReduce.java#l-39\n\n\t\t  public void reduce(IntWritable key, Iterable<IntWritable> it,\n\t\t\t        Context context) throws IOException, InterruptedException {\n\t\t\t      for (IntWritable iw : it) {\n\t\t\t        context.write(iw, null);\n\t\t\t      }\n\t\t  }\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_14_8.java", :java => "//https://searchcode.com/file/65735686/src/main/java/com/nearinfinity/hadoop/patent/CitationHistogram.java#l-14\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint count = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tcount += value.get();\n\t\t}\n\t\tfrequency.set(count);\n\t\tcontext.write(key, frequency);\n\t\t//       context.getCounter(Counters.TOTAL_PATENTS).increment(1L);\n\t\t//       context.getCounter(Counters.TOTAL_PATENTS).increment(1L);\n\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_9_10.java", :java => "//https://searchcode.com/file/65663676/src/dist/edu/umd/cloud9/example/simple/DemoWordCount.java#l-30\n\n\t// reuse objects\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\t\t// sum up values\n\t\t// sum up values\n\n\t\tIterator<IntWritable> iter = values.iterator();\n\t\tint sum = 0;\n\t\twhile (iter.hasNext()) {\n\t\t\tsum += iter.next().get();\n\t\t}\n\t\tSumValue.set(sum);\n\t\tcontext.write(key, SumValue);\n\t}\t\t  \n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector91_140_7_16.java", :java => "//https://searchcode.com/file/65662535/src/dist/edu/umd/cloud9/collection/aquaint2/NumberAquaint2Documents.java#l-2\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\toutput.collect(key, count);\n\t\tcount.set(count.get() + 1);\n\t}  \n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context91_140_1_10_1.java", :java => "//https://searchcode.com/file/93246129/TopQuery.java#l-9\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\ttotal.set(sum);\n\t\tcontext.write(key,total);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_24_16.java", :java => "//https://searchcode.com/file/66797561/src/main/java/com/jayway/hadoop/gutenberg/RowLengthCounter.java#l-8\n\n\tpublic void reduce(Text fileName, Iterable<IntWritable> arg1, Context context) throws IOException ,InterruptedException {\n\n\n\t\tint maxValue = Integer.MIN_VALUE;\n\n\t\t//TODO: calculate the maximum row length per fileName\n\t\t//TODO: calculate the maximum row length per fileName\n\n\n\t\tcontext.write(fileName, new IntWritable(maxValue));\n\t};\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_3_2.java", :java => "//https://searchcode.com/file/68758556/src/org/manea/vlad/assignedmixcounter/AssignedMixCounterReducer.java#l-10\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<IntWritable, IntWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\n\t\t// initialize sum value\n\t\t// initialize sum value\n\n\t\tint counter = 0;\n\n\t\t// iterate all values in iterator\n\t\t// iterate all values in iterator\n\n\t\twhile (values.hasNext()) {\n\n\t\t\t// add count to sum\n\t\t\t// add count to sum\n\n\t\t\tcounter += values.next().get();\n\n\t\t}\n\n\t\t// output (mix, count(mix))\n\t\t// output (mix, count(mix))\n\n\t\toutput.collect(key, new IntWritable(counter));\n\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context201_270_5_17.java", :java => "//https://searchcode.com/file/68443440/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/WordStandardDeviation.java#l-36\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (LongWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tval.set(sum);\n\t\tcontext.write(key, val);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector91_140_5_11.java", :java => "//https://searchcode.com/file/100948347/Mapreduce/Programs/StockGlobalSort.java#l-20\n\n\tpublic void reduce(Text key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<Text, LongWritable> collector, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\tlong sum = 0L;\n\t\twhile(values.hasNext())\n\t\t{\n\t\t\tsum = sum + values.next().get();\n\t\t}\n\t\tvword.set(sum);\n\t\tcollector.collect(key, vword);\n\t}\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "Text", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_2_18.java", :java => "//https://searchcode.com/file/110743700/src/mapred/org/apache/hadoop/mapred/lib/LongSumReducer.java#l-31\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values,\n\t\t\tContext context)\n\t\t\t\t\tthrows IOException, InterruptedException {\n\t\tcontext.write(key, new IntWritable(1));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector531_810_1_1_2.java", :java => "//https://searchcode.com/file/100326488/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMapRed.java#l-105\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> it,\n\t\t\tOutputCollector<IntWritable, IntWritable> out,\n\t\t\tReporter reporter) throws IOException {\n\t\tint keyint = key.get();\n\t\tint count = 0;\n\t\twhile (it.hasNext()) {\n\t\t\tit.next();\n\t\t\tcount++;\n\t\t}\n\t\tout.collect(new IntWritable(keyint), new IntWritable(count));\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "collector0_90_5_6_2.java", :java => "//https://searchcode.com/file/116093382/examples/sensors/src/main/java/com/mongodb/hadoop/examples/sensors/LogCombiner.java#l-9\n\n\tpublic void reduce(final Text key, final Iterator<IntWritable> values, final OutputCollector<Text, IntWritable> output,\n\t\t\tfinal Reporter reporter) throws IOException {\n\t\tint count = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tcount += values.next().get();\n\t\t}\n\n\t\toutput.collect(key, new IntWritable(count));\n\t}\n", :t1 => "final", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_6_14.java", :java => "//https://searchcode.com/file/64792685/java/hadoop/src/PatentHistogram.java#l-15\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint count = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tcount += value.get();\n\t\t}\n\t\tcontext.write(key, new IntWritable(count));\n\t}\n\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_30_8.java", :java => "//https://searchcode.com/file/68682372/Examples/src/com/spbsu/hadoop/FirstLetterCounter.java#l-11\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\t\tint delay = 1;\n\t\tint sum = 0;\n\t\tfor (IntWritable i: values){\n\t\t\tsum += i.get();\n\t\t\tif (k * KEY_NUMBER < j){\n\t\t\t\tThread.sleep(delay * 1000);\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj+=i.get();\n\n\t\t}\n\t\t//\t            Thread.sleep(3 + sum / delay);\n\t\t//\t            Thread.sleep(3 + sum / delay);\n\n\t\tcontext.write(key, new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_5_12.java", :java => "//https://searchcode.com/file/100948358/Mapreduce/Programs/DistributedCacheExample.java#l-14\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tlong sum = 0;\n\t\tfor(LongWritable value : values)\n\t\t{\n\t\t\tsum = sum + value.get();\n\t\t}\n\t\t//String myKey = key.toString() + \"\t\" + info.get(key.toString());\n\t\t//String myKey = key.toString() + \"\t\" + info.get(key.toString());\n\n\t\t//kword.set(myKey);\n\t\t//kword.set(myKey);\n\n\t\tvword.set(sum);\n\t\tcontext.write(kword, vword);\t\t\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context141_200_9_6.java", :java => "//https://searchcode.com/file/65662332/src/dist/edu/umd/cloud9/collection/medline/NumberMedlineCitations2.java#l-27\n\n\tpublic void reduce(IntWritable key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\tcontext.write(key, cnt);\n\t\tcnt.set(cnt.get() + 1);\n\t}\n\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_33_17.java", :java => "//https://searchcode.com/file/7193606/ch08/src/main/java/MaxTemperatureByStationNameUsingDistributedCacheFile.java#l-8\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\t\tmetadata = new NcdcStationMetadata();\n\t\t/*[*/String stationName = metadata.getStationName(key.toString());/*]*/\n\n\t\tint maxValue = Integer.MIN_VALUE;\n\t\tfor (IntWritable value : values) {\n\t\t\tmaxValue = Math.max(maxValue, value.get());\n\t\t}\n\t\tcontext.write(new Text(/*[*/stationName/*]*/), new IntWritable(maxValue));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_28_2.java", :java => "//https://searchcode.com/file/70211595/src/main/java/com/komamitsu/hadooptest/MyReducer.java#l-11\n\n\t  public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {\n\t        long sum = 0;\n\t        for (LongWritable v : values) {\n\t            sum += v.get();\n\t        }\n\t        context.write(key, new LongWritable(sum));\n\t    }\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector531_810_1_1_1.java", :java => "//https://searchcode.com/file/100326488/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMapRed.java#l-105\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> it,\n\t\t\tOutputCollector<IntWritable, IntWritable> out,\n\t\t\tReporter reporter) throws IOException {\n\t\twhile (it.hasNext()) {\n\t\t\tout.collect(it.next(), null);\n\t\t}\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "collector91_140_10_3.java", :java => "//https://searchcode.com/file/116116657/ch09-mr-features/src/main/java/oldapi/MaxTemperatureByStationNameUsingDistributedCacheFileApi.java#l-33\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\n\t\tmetadata = new NcdcStationMetadata();\n\n\t\tString stationName = metadata.getStationName(key.toString());\n\n\t\tint maxValue = Integer.MIN_VALUE;\n\t\twhile (values.hasNext()) {\n\t\t\tmaxValue = Math.max(maxValue, values.next().get());\n\t\t}\n\t\toutput.collect(new Text(stationName), new IntWritable(maxValue));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "collector0_90_1_8.java", :java => "//https://searchcode.com/file/99975950/hw1/Fox_Martin_exercise2.java#l-15\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values, OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n\t\tdouble avgVal = 0;\n\t\tint count = 0;\n\t\tdouble sum = 0;\n\t\twhile(values.hasNext()){\n\t\t\tsum += values.next().get();\n\t\t\tcount++;\n\t\t}\n\t\tavgVal = sum/count;\n\t\toutput.collect(key, new DoubleWritable(avgVal));\n\t}\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_11_2.java", :java => "//https://searchcode.com/file/73347357/src/edu/upenn/mkse212/pennbook/hadoop/DiffSortReducer.java#l-17\n\n\tpublic void reduce(IntWritable key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException \n\t{\n\t\tArrayList<Double> diffs = new ArrayList<Double>();//list of differences computed\n\t\tArrayList<Double> diffs = new ArrayList<Double>();//list of differences computed\n\n\t\tfor (DoubleWritable diffValue : values)\n\t\t{\n\t\t\tdiffs.add(diffValue.get());\n\t\t}\n\n\t\tCollections.sort(diffs);\n\t\tdouble maxDiff = diffs.get(diffs.size()-1);//get last value (largest diff)\n\t\tdouble maxDiff = diffs.get(diffs.size()-1);//get last value (largest diff)\n\n\n\t\tcontext.write(null, new DoubleWritable(maxDiff));\n\t}\n\n", :t1 => "IntWritable", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_5_6_1.java", :java => "//https://searchcode.com/file/116093382/examples/sensors/src/main/java/com/mongodb/hadoop/examples/sensors/LogCombiner.java#l-9\n\n\tpublic void reduce(final Text pKey, final Iterable<IntWritable> pValues, final Context pContext)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint count = 0;\n\t\tfor (IntWritable val : pValues) {\n\t\t\tcount += val.get();\n\t\t}\n\n\t\tpContext.write(pKey, new IntWritable(count));\n\t}\n\n", :t1 => "final", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_14_7.java", :java => "//https://searchcode.com/file/65735664/src/main/java/com/nearinfinity/hadoop/wordcount/SimpleWordCount.java#l-10\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcount.set(sum);\n\t\tcontext.write(key, count);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector141_200_1_16.java", :java => "//https://searchcode.com/file/99975919/hw2/Li_Lullo_Martin_exercise1.java#l-20\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values, OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n\t\tdouble avgVol = 0;\n\t\tdouble sum = 0;\n\t\tdouble count = 0;\n\t\twhile(values.hasNext()){\n\t\t\tsum += values.next().get();\n\t\t\tcount++;\n\t\t}\n\t\tavgVol = sum/count;\n\t\toutput.collect(key, new DoubleWritable(avgVol));\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_4_10.java", :java => "//https://searchcode.com/file/100948390/Mapreduce/Programs/SequenceMapReduce.java#l-8\n\n\t\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tfor(LongWritable value : values)\n\t\t\t{\n\t\t\t\tsum = sum + value.get();\n\t\t\t}\n\t\t\tvword.set(sum);\n\t\t\tcontext.write(key, vword);\n\t\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_35_20.java", :java => "//https://searchcode.com/file/11331165/core/src/main/java/org/apache/mahout/math/hadoop/stats/StandardDeviationCalculatorReducer.java#l-25\n\n\tpublic void reduce(IntWritable key, Iterable<DoubleWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\t\tdouble sum = 0.0;\n\t\tfor (DoubleWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcontext.write(key, new DoubleWritable(sum));\n\t}\n\n", :t1 => "IntWritable", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context271_360_2_10.java", :java => "//https://searchcode.com/file/70647403/MRDP/src/main/java/mrdp/ch6/JobChainingDriver.java#l-24\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values,\n\t\t\tContext context) throws IOException, InterruptedException {\n\n\t\t// Increment user counter, as each reduce group represents one user\n\t\t// Increment user counter, as each reduce group represents one user\n\n\t\t//context.getCounter(AVERAGE_CALC_GROUP, USERS_COUNTER_NAME).increment(1);\n\t\t//context.getCounter(AVERAGE_CALC_GROUP, USERS_COUNTER_NAME).increment(1);\n\n\n\t\tint sum = 0;\n\n\t\tfor (LongWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\n\t\toutvalue.set(sum);\n\t\tcontext.write(key, outvalue);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_1_7.java", :java => "//https://searchcode.com/file/94159078/src/main/java/GenomeMapReduce.java#l-24\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> values, OutputCollector<IntWritable, IntWritable> output, Reporter reporter) throws IOException {\n\t\tint count = 0;\n\t\twhile (values.hasNext()) count += values.next().get();\n\t\toutput.collect(key, new IntWritable(count));\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_22_18.java", :java => "//https://searchcode.com/file/74337096/mapreduce-lab/solved/src/fr/eurecom/dsg/mapreduce/WordCount.java#l-14\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values)\n\t\t\tsum += value.get();\n\t\tcontext.write(key,new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_3_8.java", :java => "//https://searchcode.com/file/93911496/src/main/java/org/conan/myhadoop/mr/WordCount.java#l-14\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\tint sum = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\t\tresult.set(sum);\n\t\toutput.collect(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_7_9.java", :java => "//https://searchcode.com/file/72623943/hadoop/wordcount/src/main/java/com/oreilly/springdata/hadoop/wordcount/WordCount.java#l-12\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_11_18.java", :java => "//https://searchcode.com/file/58018978/web-crawler/src/main/java/org/profile/mapreduce/EMRReducer.java#l-7\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException,\n\tInterruptedException {\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcontext.write(key, new Text(sum + \"\"));\n\t\t//context.getCounter(EMRDriver.STATE_COUNTER_GROUP, EMRDriver.TOTAL_PROFILE_COUNT).increment(1);\n\t\t//context.getCounter(EMRDriver.STATE_COUNTER_GROUP, EMRDriver.TOTAL_PROFILE_COUNT).increment(1);\n\n\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_10_15.java", :java => "//https://searchcode.com/file/71013551/samples/jobs/hadoop/pentaho-mapreduce-sample-src/src/org/pentaho/hadoop/sample/wordcount/WordCountReducer.java#l-31\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output,\n\t\t\tReporter reporter) throws IOException {\n\t\tint wordCount = 0;\n\t\twhile (values.hasNext()) {\n\t\t\twordCount += ((IntWritable) values.next()).get();\n\t\t}\n\n\t\tthis.totalWordCount.set(wordCount);\n\t\toutput.collect(key, this.totalWordCount);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context141_200_9_16.java", :java => "//https://searchcode.com/file/68443504/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/WordMean.java#l-33\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint theSum = 0;\n\t\tfor (LongWritable val : values) {\n\t\t\ttheSum += val.get();\n\t\t}\n\t\tsum.set(theSum);\n\t\tcontext.write(key, sum);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector11_531_810_4_8.java", :java => "//https://searchcode.com/file/10576200/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/GenericMRLoadGenerator.java#l-42\n\n\tpublic void reduce(LongWritable key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<LongWritable,LongWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\twhile (values.hasNext()) {\n\t\t\temit(key, values.next(), output);\n\t\t}\n\t}\n\n", :t1 => "LongWritable", :t2 => "LongWritable", :t3 => "LongWritable", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context201_270_6_18.java", :java => "//https://searchcode.com/file/8195388/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRClientCluster.java#l-85\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\t//context.getCounter(\"MyCounterGroup\", \"REDUCE_INPUT_GROUPS\").increment(1);\n\t\t//context.getCounter(\"MyCounterGroup\", \"REDUCE_INPUT_GROUPS\").increment(1);\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t\t//context.getCounter(\"MyCounterGroup\", \"REDUCE_OUTPUT_RECORDS\").increment(1);\n\t\t//context.getCounter(\"MyCounterGroup\", \"REDUCE_OUTPUT_RECORDS\").increment(1);\n\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_4_12.java", :java => "//https://searchcode.com/file/100948401/Mapreduce/Programs/UserRatings.java#l-11\n\n\t  public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t\t{\n\t\t\tlong count = 0;\n\t\t\tfor(LongWritable value : values)\n\t\t\t{\n\t\t\t\tcount = count + value.get();\n\t\t\t}\n\t\t\tvword.set(count);\n\t\t\tcontext.write(key, vword);\n\t\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_1_16.java", :java => "//https://searchcode.com/file/72246150/src/main/java/HBaseIA/TwitBase/mapreduce/TimeSpent.java#l-12\n\n\t  public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {\n\t      long sum = 0;\n\t      for(LongWritable time : values) {\n\t        sum += time.get();\n\t      }\n\t      context.write(key, new LongWritable(sum));\n\t    }\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context361_530_3_2_5.java", :java => "//https://searchcode.com/file/114133755/src/project2/Project2.java#l-24\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\tIntWritable result = new IntWritable();\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t\t//context.getCounter(ProjectCounters.COMPONENTS).increment(1);\n\t\t//context.getCounter(ProjectCounters.COMPONENTS).increment(1);\n\n\t\t//context.getCounter(ProjectCounters.SQUAREDSUM).increment(sum * sum);\n\t\t//context.getCounter(ProjectCounters.SQUAREDSUM).increment(sum * sum);\n\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_1_6.java", :java => "//https://searchcode.com/file/92967601/LambdaArchitecture/WordCount/src/main/java/com/paulbutcher/WordCount.java#l-20\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val: values)\n\t\t\tsum += val.get();\n\t\tcontext.write(key, new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_10_13.java", :java => "//https://searchcode.com/file/69738596/code/src/main/java/com/thoughtworks/samples/hadoop/mapred/wordcount/WCReducer.java#l-4\n\n\tpublic void reduce(Text word, Iterable<IntWritable> counts, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\tint wordCount = 0;\n\t\tfor (IntWritable count : counts) {\n\t\t\twordCount += count.get();\n\t\t}\n\t\tcontext.write(word, new IntWritable(wordCount));\n\t}  \n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector91_140_1_7.java", :java => "//https://searchcode.com/file/94159083/src/main/java/WordCount.java#l-22\n\n\tpublic void reduce( Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output,\n\t\t\tReporter reporter) throws IOException\n\t{\n\t\t// Iterate over all of the values (counts of occurrences of this word)\n\t\t// Iterate over all of the values (counts of occurrences of this word)\n\n\t\tint count = 0;\n\t\twhile( values.hasNext() )\n\t\t{\n\t\t\t// Add the value to our count\n\t\t\t// Add the value to our count\n\n\t\t\tcount += values.next().get();\n\t\t}\n\n\t\t// Output the word with its count (wrapped in an IntWritable)\n\t\t// Output the word with its count (wrapped in an IntWritable)\n\n\t\toutput.collect( key, new IntWritable( count ) );\n\t}\n\n", :t1 => "", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context141_200_14_14.java", :java => "//https://searchcode.com/file/65735671/src/main/java/com/nearinfinity/hadoop/wordcount/BetterWordCount.java#l-17\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcount.set(sum);\n\t\tcontext.write(key, count);\n\t\t//   context.getCounter(ReduceCounters.UNIQUE_WORDS_COUNTED).increment(1L);\n\t\t//   context.getCounter(ReduceCounters.UNIQUE_WORDS_COUNTED).increment(1L);\n\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_6_13.java", :java => "//https://searchcode.com/file/64792661/java/hadoop/src/WordCount.java#l-11\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tif (sum > 4) {\n\t\t\tresult.set(sum);\n\t\t\tcontext.write(key, result);\n\t\t}\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector141_200_9_4.java", :java => "//https://searchcode.com/file/65662211/src/dist/edu/umd/cloud9/collection/line/NumberTextDocuments.java#l-33\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\toutput.collect(key, sCnt);\n\t\tsCnt.set(sCnt.get() + 1);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_35_1.java", :java => "//https://searchcode.com/file/2223594/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingReducer.java#l-23\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException,\n\tInterruptedException {\n\t\tlong sum = 0;\n\t\tfor (LongWritable value : values) {\n\t\t\t//context.setStatus(\"Parallel Counting Reducer :\" + key);\n\t\t\t//context.setStatus(\"Parallel Counting Reducer :\" + key);\n\n\t\t\tsum += value.get();\n\t\t}\n\t\t//context.setStatus(\"Parallel Counting Reducer: \" + key + \" => \" + sum);\n\t\t//context.setStatus(\"Parallel Counting Reducer: \" + key + \" => \" + sum);\n\n\t\tcontext.write(key, new LongWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector141_200_10_1.java", :java => "//https://searchcode.com/file/73390634/src/Corrector/IdentifyTrustedReads.java#l-29\n\n\tpublic void reduce(Text prefix, Iterator<IntWritable> iter,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException\n\t{\n\t\tint sum =0;\n\t\tint untrust_count = 0;\n\t\tint TRUST = 1;\n\t\twhile(iter.hasNext())\n\t\t{\n\t\t\tint frequency = iter.next().get();\n\t\t\tif (frequency <= KmerThreshold) {\n\t\t\t\tuntrust_count = untrust_count + 1;\n\t\t\t\tTRUST = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\toutput.collect(prefix, new IntWritable(TRUST));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "collector0_90_10_2.java", :java => "//https://searchcode.com/file/69346929/core/src/main/java/org/apache/mahout/classifier/cbayes/CBayesThetaNormalizerReducer.java#l-23\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values,\n\t\t\tOutputCollector<Text, DoubleWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\t\t// Key is label,word, value is the number of times we\"ve seen this label\n\t\t// Key is label,word, value is the number of times we\"ve seen this label\n\n\t\t// word per local node. Output is the same\n\t\t// word per local node. Output is the same\n\n\n\t\tdouble weightSumPerLabel = 0.0;\n\n\t\twhile (values.hasNext()) {\n\t\t\tweightSumPerLabel += values.next().get();\n\t\t}\n\t\toutput.collect(key, new DoubleWritable(weightSumPerLabel));\n\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector")
Testcase.create(:name => "collector0_90_10_5.java", :java => "//https://searchcode.com/file/69347180/core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesFeatureReducer.java#l-21\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values,\n\t\t\tOutputCollector<Text, DoubleWritable> output,\n\t\t\tReporter reporter) throws IOException {\n\t\t//Key is label,word, value is the number of times we\"ve seen this label word per local node.  Output is the same\n\t\t//Key is label,word, value is the number of times we\"ve seen this label word per local node.  Output is the same\n\n\n\t\tdouble sum = 0.0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\t\toutput.collect(key, new DoubleWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector")
Testcase.create(:name => "collector141_200_9_5.java", :java => "//https://searchcode.com/file/65662303/src/dist/edu/umd/cloud9/collection/medline/NumberMedlineCitations.java#l-32\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<IntWritable, IntWritable> output, Reporter reporter) throws IOException {\n\t\toutput.collect(key, cnt);\n\t\tcnt.set(cnt.get() + 1);\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_7_15.java", :java => "//https://searchcode.com/file/96118988/java/hadoop/MaxTemperatureReducer.java#l-5\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\t\tint maxValue = Integer.MIN_VALUE;\n\t\tfor(IntWritable value : values){\n\t\t\tmaxValue = Math.max(maxValue, value.get());\n\t\t}\n\t\tcontext.write(key,new IntWritable(maxValue));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_2_1.java", :java => "//https://searchcode.com/file/67105467/java-hadoop-scalacheck/src/main/java/com/company/hadoop/WordCount.java#l-9\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\t\t// do nothing for empty keys\n\t\t// do nothing for empty keys\n\n\t\tif(key.getLength() == 0)\n\t\t\treturn;\n\n\t\t// otherwise sump up the values\n\t\t// otherwise sump up the values\n\n\t\tint sum = 0;\n\t\tfor (IntWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcontext.write(key, new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_32_18.java", :java => "//https://searchcode.com/file/2222777/examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToRecReducer.java#l-27\n\n\t  public void reduce(Text key, Iterable<LongWritable> values, Context context)\n\t\t\t    throws IOException, InterruptedException {\n\t\t\t    if (useCounts) {\n\t\t\t      long sum = 0;\n\t\t\t      for (LongWritable value : values) {\n\t\t\t        sum++;\n\t\t\t      }\n\t\t\t      context.write(new Text(key.toString() + \",\" + sum), null);\n\t\t\t    } else {\n\t\t\t      context.write(new Text(key.toString()), null);\n\t\t\t    }\n\t\t\t  }\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_25_5.java", :java => "//https://searchcode.com/file/71063167/swift-file-system-locality-test/src/main/java/com/mirantis/swift/fs/TestJob.java#l-10\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {\n\t\tlong summ = 0;\n\t\tfor (LongWritable value : values) {\n\t\t\tsumm += value.get();\n\t\t}\n\n\t\tcontext.write(key, new LongWritable(summ));\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector12_0_90_6_5.java", :java => "//https://searchcode.com/file/93068158/src/mapred/org/apache/hadoop/mapred/lib/LongSumReducer.java#l-26\n\n\tpublic void reduce(LongWritable key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<LongWritable, LongWritable> output,\n\t\t\tReporter reporter)\n\t\t\t\t\tthrows IOException {\n\n\t\t// sum all values for this key\n\t\t// sum all values for this key\n\n\t\tlong sum = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\n\t\t// output sum\n\t\t// output sum\n\n\t\toutput.collect(key, new LongWritable(sum));\n\t}\n\n", :t1 => "LongWritable", :t2 => "LongWritable", :t3 => "LongWritable", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context91_140_24_20.java", :java => "//https://searchcode.com/file/70192096/src/test/java/com/shopzilla/hadoop/mapreduce/MiniMRClusterContextMRTest.java#l-26\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {\n\n\t\tlong sum = 0;\n\t\tfor (LongWritable value : values) {\n\t\t\tsum += value.get();\n\t\t}\n\t\tcontext.write(key, new LongWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector91_140_7_17.java", :java => "//https://searchcode.com/file/65663781/src/dist/edu/umd/cloud9/example/memcached/demo/WordCount.java#l-25\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values,\n\t\t\tOutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\t// sum up values\n\t\t// sum up values\n\n\t\tint sum = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\t\tSumValue.set(sum);\n\t\toutput.collect(key, SumValue);\n\t}\t  \n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "collector531_810_1_1_3.java", :java => "//https://searchcode.com/file/100326488/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMapRed.java#l-105\n\n\tpublic void reduce(IntWritable key, Iterator<IntWritable> it,\n\t\t\tOutputCollector<IntWritable, IntWritable> out,\n\t\t\tReporter reporter) throws IOException {\n\t\tint keyint = key.get();\n\t\tint total = 0;\n\t\twhile (it.hasNext()) {\n\t\t\ttotal += it.next().get();\n\t\t}\n\t\tout.collect(new IntWritable(keyint), new IntWritable(total));\n\t}\n\n", :t1 => "IntWritable", :t2 => "IntWritable", :t3 => "IntWritable", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_1_4.java", :java => "//https://searchcode.com/file/95086566/Lab1-Task2%20and%203/WordCount/WordCount.java#l-9\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n            Context context) throws IOException, InterruptedException {\n\t\tint sum = 0; // initialize the sum for each keyword\n\t\tint sum = 0; // initialize the sum for each keyword\n\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();  \n\t\t}\n\t\tresult.set(sum);\n\n\t\tcontext.write(key, result); // create a pair <keyword, number of occurences>\n\t\tcontext.write(key, result); // create a pair <keyword, number of occurences>\n\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_8_2.java", :java => "//https://searchcode.com/file/100948365/Mapreduce/Programs/StockMinMaxReducer.java#l-6\n\n\tpublic void reduce(Text key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tdouble min = Double.MAX_VALUE;\n\t\tdouble max = 0.0;\n\t\tfor(DoubleWritable value : values)\n\t\t{\n\t\t\tdouble myvalue = value.get();\n\t\t\tmax = (max > myvalue) ? max : myvalue;\n\t\t\tmin = (min < myvalue) ? min : myvalue;\n\t\t}\n\t\tString minmax = \"Min is \" + min + \", Max is \" + max;\n\t\tvword.set(minmax);\n\t\tcontext.write(key, vword);\n\t}\n\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_7_15.java", :java => "//https://searchcode.com/file/65662525/src/dist/edu/umd/cloud9/collection/aquaint2/NumberAquaint2Documents2.java#l-2\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context)\n\t\t\tthrows IOException, InterruptedException {\n\t\tcontext.write(key, cnt);\n\t\tcnt.set(cnt.get() + 1);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context91_140_5_17.java", :java => "//https://searchcode.com/file/100948386/Mapreduce/Programs/StockVolumeAvgSum.java#l-10\n\n\tpublic void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException\n\t{\n\t\tlong sum = 0;\n\t\tdouble avg = 0.0;\n\t\tint counter = 0;\n\t\tfor(LongWritable value : values)\n\t\t{\n\t\t\tsum = sum + value.get();\n\t\t\tcounter++;\n\t\t}\n\t\tavg = (double) sum / counter;\n\t\tvword.set(\"sum: \" + sum + \"\tAverage: \" + avg);\n\t\tcontext.write(key, vword);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_7_17.java", :java => "//https://searchcode.com/file/98860514/CombinerMR/WordCountCombiner.java#l-14\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\t// since the mapper output and reducer outputs are of same type we cna keep the key value types same\n\t\t// since the mapper output and reducer outputs are of same type we cna keep the key value types same\n\n\t\t// we will filter keys and eleminate any records that has word Berners-Lee or whos total vlaues are less then min value\n\t\t// we will filter keys and eleminate any records that has word Berners-Lee or whos total vlaues are less then min value\n\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\t// access runtime parameter for min value\n\t\t// access runtime parameter for min value\n\n\t\t//Configuration conf = context.getConfiguration();\n\t\t//Configuration conf = context.getConfiguration();\n\n\t\tint min=0;\n\t\t// filter for a value, \n\t\t// filter for a value, \n\n\t\tif((key.toString().equals(\"Berners-Lee\")==false) || sum>min ) context.write(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_5_15.java", :java => "//https://searchcode.com/file/99757467/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/examples/GridHadoopWordCount1Reduce.java#l-35\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter)\n\t\t\tthrows IOException {\n\t\tassert wasConfigured : \"Reducer should be configured\";\n\n\tint sum = 0;\n\n\twhile (values.hasNext())\n\t\tsum += values.next().get();\n\n\toutput.collect(key, new IntWritable(sum));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
Testcase.create(:name => "context141_200_2_15_1.java", :java => "//https://searchcode.com/file/93246120/csdn.java#l-10\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\ttotal.set(sum);\n\t\tcontext.write(key,total);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "context0_90_7_18.java", :java => "//https://searchcode.com/file/98860520/CombinerMR/WordCountReduce.java#l-16\n\n\tpublic void reduce(Text key, Iterable<IntWritable> values, \n\t\t\tContext context\n\t\t\t) throws IOException, InterruptedException {\n\t\tSystem.out.println(\"Reducers Sort and Shuffle Merge Brings keys Over HTTP\"+ key +\" and there  Values  our case its <key> <v1> <v1> each being 1 \" );\n\n\t\tint sum = 0;\n\t\tfor (IntWritable val : values) {\n\t\t\tsum += val.get();\n\t\t}\n\t\tresult.set(sum);\n\t\tcontext.write(key, result);\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "Collector201_270_5_4.java", :java => "//https://searchcode.com/file/70647392/MRDP/src/main/java/mrdp/ch6/ChainMapperDriver.java#l-44\n\n\tpublic void reduce(Text key, Iterator<LongWritable> values,\n\t\t\tOutputCollector<Text, LongWritable> output, Reporter reporter)\n\t\t\t\t\tthrows IOException {\n\n\t\tint sum = 0;\n\t\twhile (values.hasNext()) {\n\t\t\tsum += values.next().get();\n\t\t}\n\t\toutvalue.set(sum);\n\t\toutput.collect(key, outvalue);\n\t}\n\n", :t1 => "Text", :t2 => "LongWritable", :t3 => "Text", :t4 => "LongWritable", :r_type => "Collector")
Testcase.create(:name => "context0_90_27_19.java", :java => "//https://searchcode.com/file/68880294/src/main/java/mia/clustering/ch12/lastfm/DictionaryReducer.java#l-9\n\n\tpublic void reduce(Text artist, Iterable<IntWritable> values,\n\t\t\tContext context) throws IOException,\n\tInterruptedException {\n\t\tcontext.write(artist, new IntWritable(0));\n\t}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "", :t4 => "", :r_type => "Context")
Testcase.create(:name => "collector0_90_1_14.java", :java => "//https://searchcode.com/file/66636679/src/edu/cs/indiana/b649/WordCount.java#l-31\n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n\t\tint sum = 0;\n\t\twhile (values.hasNext())\n\t\t\tsum += values.next().get();\n\t\toutput.collect(key, new IntWritable(sum));\n\t}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector")
puts "done"