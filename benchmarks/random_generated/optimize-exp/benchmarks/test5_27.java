// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
if (a021 < a024) {
a020 = a015 - a015;
a014 = a019 - a024;
a021 = a024 + a010;
a024 = a013 - a003;
a007 += a013;
a008 -= a020;
a011 = a016 - a017;
a004 -= a018;
a017 -= a024;
a024 = a010 + a009;
a023 = a012 - a011;
a016 = a018 - a000;
a007 = a009 + -5;
a000 = a024 - a000;
a005 = a021 + a021;
a021 -= 4;
a016 += a015;
a023 += a001;
cur -= a019;
a007 -= a022;
a017 = a016 - a003;
cur -= a020;
a008 -= a001;
a024 = a005 - a001;
a024 = a011 + a013;
a023 -= a019;
a014 += a014;
a003 += a008;
a014 += a005;
} else {
cur += a008;
a013 -= a019;
a009 = a008 + a022;
a014 -= a019;
a021 -= a019;
a023 = a023 - a017;
a021 = a020 + a011;
a003 -= a000;
a024 = a007 + a018;
a002 += a001;
a000 += a005;
a020 = a013 + a017;
a022 = a000 + a007;
a014 = a004 + a011;
a015 = a005 - a004;
a013 += a009;
a010 -= a001;
a001 = a009 + a021;
a023 = a023 - a021;
a005 -= a018;
a007 -= a005;
if (a010 >= a006) {
a001 = a008 + -4;
a010 += a014;
a020 = a024 - a022;
a006 += a024;
a002 -= a020;
a017 = cur - a009;
a000 = a002 - a023;
a021 = a018 - a023;
a001 += 0;
a020 = -3 - cur;
a004 -= a005;
a007 -= a008;
a014 -= a003;
a006 = a021 + a005;
a022 -= a011;
a005 -= a018;
a023 += a013;
cur += a002;
a003 += a002;
a008 = a019 - a011;
a014 = a019 + a009;
} else {
a005 -= a016;
a022 += a013;
a000 -= a005;
a003 = a003 - a015;
a016 = -5 - a006;
a015 += a000;
a010 += a003;
a021 -= a016;
a003 = a017 - a015;
a000 = cur + a002;
a016 = a024 + a024;
a021 = 4 - a012;
a008 -= a017;
a003 -= a006;
a023 = a013 - a022;
a012 += a015;
a002 -= a000;
}
a013 = a006 + a022;
a004 += a012;
if (a014 >= a009) {
a002 = a017 - a012;
a008 = a019 + a003;
cur += a007;
a005 = a019 - a010;
a002 = a023 - a004;
a004 += a014;
a012 = a023 + a010;
a023 -= a016;
a005 = a007 + a010;
a011 -= a018;
a022 = a010 + a022;
a013 = a013 + a004;
a002 = a020 - a021;
a007 = -3 + a015;
a016 += a013;
a011 = a009 + a001;
a000 = a024 - a019;
a000 = a008 + a008;
a024 += a006;
} else {
a022 -= a018;
a008 -= a011;
a015 -= a010;
a008 = a001 + a003;
a016 += cur;
a007 -= a002;
}
a007 = a015 - a015;
a011 = a000 - a007;
a006 = a008 - a002;
a007 = -3 + a003;
a003 += a000;
a021 += a005;
cur += a017;
a003 = a024 + a021;
a009 += cur;
a000 = a009 + a020;
a005 = a014 + a014;
a008 += 0;
a019 = a003 - a007;
a024 += a018;
a005 = a009 + a024;
a015 = a005 - a018;
}
a013 = a023 + a007;
a001 = a015 + a022;
a024 = a000 * 0;
a021 -= a014;
a000 = a007 - a005;
a010 += a016;
if (a007 < a022) {
a023 -= cur;
a023 -= a009;
a001 = a015 + a001;
a014 = -3 - a017;
a020 -= a000;
a016 -= a011;
cur -= a021;
a009 = a007 - a009;
a007 = a004 + a010;
a012 = a021 + a014;
a007 = a005 - a001;
a003 -= a012;
a017 = -1 + a003;
a017 -= a012;
a017 += a012;
a005 = cur + a023;
a001 = 3 - a005;
a016 = a011 - a009;
a012 -= a012;
a021 += a008;
a013 -= a012;
a010 = a012 + a018;
a017 = a021 - a007;
a006 = a007 + a014;
cur = a003 + a021;
a008 = a013 - a021;
} else {
a018 = a010 - a020;
a008 += a024;
a003 += a022;
if (a020 != a002) {
a000 = a002 + a003;
a013 -= a002;
a017 += a012;
a013 = a018 + a001;
a010 = a009 + a024;
a020 = a009 + a016;
a023 += a015;
a014 = a007 + a011;
a016 = a009 - a020;
a006 += a016;
} else {
a004 -= a022;
a011 -= a022;
a013 -= a003;
a010 = a011 + a023;
a011 = a002 - a008;
cur = a015 + a010;
a004 = a012 - a010;
a023 -= a011;
a011 = a010 + a024;
}
a020 = a001 - a020;
a015 = a013 - a015;
a014 += a023;
a004 -= a001;
a002 = a023 - cur;
a010 += a000;
a008 = a003 - 4;
a014 = a021 - a002;
a006 = -1 - a000;
a019 -= a007;
a003 = a005 + a024;
a021 += a015;
a005 -= a015;
a003 = a007 - a009;
a019 += a014;
a007 -= a011;
a011 = a005 - a000;
}
a000 -= a009;
a021 -= a007;
a008 = a023 - a023;
a007 -= a010;
a007 += cur;
a021 += a000;
a009 = a017 + a001;
a019 -= a001;
a003 -= a022;
a002 = a023 + a019;
a020 += a000;
a015 += a005;
a013 += a004;
a005 = a024 + cur;
a018 = cur - a018;
a023 -= a011;
a016 += a006;
a024 -= a018;
cur += a024;
a018 += a020;
a022 = a024 - a008;
a014 = a008 + a002;
a000 = a013 + a009;
a018 -= a021;
a013 -= a000;
a008 -= a004;
a023 -= a018;
a003 = a010 + a003;
a006 += a006;
a021 -= a022;
a014 = a010 - a000;
a006 += a009;
a017 = a006 - a016;
a010 -= a015;
a012 += a020;
a020 += a017;
a018 = a017 + a014;
a003 = a020 + a020;
a002 = a012 + cur;
a019 += a009;
a008 -= a015;
a015 += a016;
a012 -= a024;
cur += 4;
a010 = a015 - a001;
cur = a010 + a015;
a010 += a016;
a020 -= cur;
}
output.collect(prefix, new IntWritable(a006));
}
