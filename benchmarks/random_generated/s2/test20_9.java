// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a018 -= a019;
a014 += a009;
a006 -= a014;
a000 = a003 + a017;
a010 = a016 + a017;
a000 += cur;
if (a007 <= a015) {
a005 -= a018;
a012 = 1 - a000;
if (cur <= a015) {
a007 = a013 - cur;
a002 = a003 + a001;
a008 -= a011;
a005 = a011 - a017;
} else {
a009 += a002;
if (a009 == a000) {
if (a012 <= a005) {
a005 = a019 + cur;
cur -= 1;
a013 = a018 - a002;
a012 -= a014;
a003 = a018 - a006;
if (a015 <= a009) {
a009 += a004;
a018 += a000;
a013 -= a002;
a007 += a013;
a010 -= a000;
a001 = a006 + a005;
a002 = a012 - a012;
if (cur <= a012) {
a017 += cur;
a019 -= a015;
a012 += a007;
a008 += a015;
} else {
a011 = a001 + a002;
cur = a003 - a016;
a007 = a018 - a005;
a019 += 2;
if (a003 == a002) {
a016 = a018 + a011;
a019 = a015 - 2;
a018 = -4 - a005;
a010 = a004 + a013;
a016 -= a018;
a000 += a006;
a018 = a016 + a009;
if (a018 != a017) {
a011 += a005;
cur = a002 - a009;
a008 = a004 + a019;
a018 = a016 + a000;
a007 = a009 - a013;
a017 -= a001;
if (cur < a018) {
a008 = a015 - a013;
a016 += a016;
if (a017 == cur) {
if (a000 == a013) {
if (a018 != a005) {
a015 -= a014;
a003 += a019;
a018 = a006 + a004;
} else {
a010 = a003 - a007;
if (a016 == a001) {
a001 -= a010;
cur -= a002;
a009 = a003 + a013;
a003 = a011 - a015;
a001 = cur - cur;
} else {
a004 = a008 - a000;
a008 = a000 * -2;
cur -= cur;
a004 += a011;
}
a016 = a004 - a015;
cur += a003;
a008 = a005 - a017;
a005 = a007 + a015;
if (a004 > a015) {
a012 = a001 - a019;
a010 = a003 - a002;
a011 -= -4;
a019 += a005;
} else {
a004 = a012 + a000;
a005 = a019 - a007;
a007 += a016;
a009 -= cur;
}
a016 -= a007;
}
a018 += a012;
a019 = a019 - a015;
a002 = a019 - a019;
a005 = -4 + a017;
a002 = a013 + a015;
} else {
a017 = a008 + a009;
a008 -= a018;
a012 -= cur;
a005 -= a008;
}
a005 -= 3;
a012 -= 3;
a003 -= a019;
} else {
a018 = a019 - a014;
a008 = a017 - a004;
a000 = a016 + a017;
}
a008 = a011 - a006;
a010 += a011;
a017 = a019 - a016;
a019 += a017;
a015 = a007 - a016;
a011 = -3 + cur;
} else {
a013 = a017 + a008;
a004 -= a019;
a011 -= a016;
a014 = a005 * 0;
a000 = a003 - a010;
a008 += a011;
if (a004 >= a010) {
a010 += a004;
a014 += a018;
a001 -= a004;
a007 -= cur;
cur = a000 + a016;
a018 -= a013;
if (a004 < a002) {
a007 -= a006;
a008 = a006 + a009;
a006 += a004;
a004 = a015 - a003;
} else {
a004 -= a010;
a010 = a018 - a002;
a015 += 2;
a017 -= a015;
a016 -= a008;
a011 += a018;
}
a001 -= a006;
a016 = a005 - -1;
a001 = a007 + a003;
} else {
if (cur == a000) {
a005 += a009;
a017 = a019 - a014;
a003 += a013;
a015 = a017 + cur;
a007 = a017 - a012;
} else {
a005 += a012;
a012 = a001 - 4;
a005 = a016 - a011;
a009 = a000 + a011;
a007 = a006 + a003;
a004 = a006 - a019;
}
cur = a010 - a000;
a003 = a019 + a006;
if (a005 < a012) {
a018 = a003 + a005;
a000 += a006;
} else {
a001 = a013 + a003;
a000 = a007 - a016;
a010 += a018;
a007 += a017;
a014 -= a006;
}
}
}
a013 += a015;
a005 -= a016;
a012 -= a006;
a003 += a003;
if (a014 > a018) {
a001 += a019;
a014 = a019 - a003;
a008 = a003 - a015;
a016 -= a008;
if (a011 <= a002) {
a010 -= a013;
} else {
a013 = a001 + a001;
}
a009 += a009;
} else {
a005 -= a018;
}
a004 = a017 - a006;
cur -= a002;
a006 = a010 + a008;
} else {
a008 -= a019;
a018 = a005 + a018;
}
a002 += a007;
a012 += a017;
a019 = 2 + a006;
a006 = a011 - a008;
} else {
}
}
a009 += a005;
cur -= a012;
a005 = a017 - a011;
a002 -= cur;
} else {
a003 = a001 - cur;
a002 -= cur;
a013 -= cur;
a010 += a006;
cur = a011 - a013;
}
a000 = a006 - a011;
} else {
a008 = 4 + a006;
a017 = a005 + cur;
}
} else {
a011 = a010 - a009;
a009 -= cur;
a004 -= a015;
a008 = a008 - a016;
a017 -= a005;
a017 = a008 - a008;
}
a018 = a018 - a015;
}
a003 = a001 - a007;
a015 = a007 - a008;
a001 = a014 - a001;
a002 -= 2;
a011 = a015 + a008;
a007 -= a015;
a004 += a011;
} else {
a008 = a014 + a018;
a004 -= a003;
a018 -= a019;
a009 += a019;
a007 -= -1;
a003 = a001 - a017;
a004 -= cur;
}
a010 = a013 + a001;
a007 = a015 + a008;
a018 = -4 - a009;
a003 += a013;
a010 -= a012;
a005 = a000 - a005;
}
output.collect(prefix, new IntWritable(a014));
}
