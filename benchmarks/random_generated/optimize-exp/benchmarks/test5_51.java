// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a006 = a002 + a006;
a000 = cur + a004;
a002 -= a023;
a010 -= a024;
a015 = a023 + a019;
a016 = a008 - a007;
a001 = a009 - a021;
a017 -= a000;
a005 -= a000;
a003 = cur + a001;
cur = a018 + a000;
a000 = a014 - a021;
if (a014 == a001) {
a015 += a024;
a014 = a023 + a021;
a003 -= a005;
a013 += a004;
a004 = a018 + a018;
if (a003 != a021) {
a024 = a023 + a014;
if (a024 < a016) {
a004 = a009 - a022;
a016 = a017 + a013;
a023 = a013 - a017;
a020 = a009 - a004;
a007 += a008;
a013 = a004 + a024;
a024 = a010 * -4;
a020 = a002 - a014;
a007 = a015 - a021;
a002 = a011 + a003;
a009 = a016 - a024;
a014 += a003;
a019 -= a001;
a004 = a022 - a001;
cur = a000 - a022;
cur += a002;
a018 = cur - a003;
a020 -= 1;
a010 = a002 - a001;
a021 = a021 + a012;
a001 += a022;
a011 = -3 + a022;
a016 = a009 + a023;
a004 -= a012;
a019 -= a003;
} else {
a020 = a019 - a001;
a001 -= a015;
a007 += a004;
a004 -= a022;
a007 = a022 - a019;
a011 = a022 + a010;
a000 = a023 - a018;
a002 -= a005;
a004 -= a011;
a009 = a006 + 3;
a010 += a009;
a018 = a018 + a004;
a010 = a003 + a016;
a018 -= a014;
a018 = a013 + a022;
a022 += a007;
a012 += a019;
a006 -= a016;
a018 = a012 + a001;
a009 = -4 + a014;
a012 += a005;
a004 -= a020;
a023 = a013 + a003;
a002 = a017 - a015;
a001 = a010 - a003;
a014 = cur - a005;
}
a008 = a001 - a009;
a019 -= a010;
a006 -= a024;
a007 = a022 + a011;
a017 = a019 - cur;
a020 = a007 - a003;
a013 += a002;
a011 -= a011;
a013 += -3;
a005 += a005;
a011 = a017 + a010;
a019 += a016;
a017 = a011 + a013;
a005 = a002 + a007;
a014 += 2;
a019 -= a023;
a018 = -4 + a007;
a021 = a022 + a001;
a023 -= 2;
a009 += a007;
a002 = a023 + a008;
a000 = a010 - a017;
a002 = a010 + a001;
a018 = a003 + a005;
a004 = a001 - a004;
a001 += a002;
a005 -= a011;
a008 += 0;
a011 = a009 - a011;
a014 = a011 - a015;
if (a008 != a009) {
a013 = a024 - a001;
a008 -= a000;
a016 -= a023;
a017 -= a008;
cur += a013;
a000 = a000 + a004;
a017 += a007;
a014 += a020;
a016 -= a008;
a022 = a019 + a012;
a014 = a022 - -2;
a004 -= a008;
a019 = a000 - a011;
a007 = -3 - a011;
a017 = a001 - a003;
a018 += a011;
a009 = a005 - a014;
a022 += a006;
a021 += a008;
a024 = a015 - a000;
a012 -= a010;
if (a023 <= a015) {
} else {
a020 = a023 - a023;
a021 = a009 - a012;
a015 -= a010;
}
a018 = a007 - a011;
a024 += a017;
a008 = a022 - a017;
a006 = a005 + a023;
} else {
a001 = a015 - cur;
a006 = a016 - a011;
a007 -= a017;
}
a011 = a006 + a011;
a016 = a007 + a018;
a016 += a023;
a018 = a016 + a011;
a002 = a015 - a022;
a018 -= a023;
a018 = a013 - a012;
a014 = cur + a004;
a020 += a011;
a005 += a016;
a020 = a003 - a008;
a009 += cur;
a011 = a023 - a015;
a019 = a018 + a014;
a015 += a013;
a018 -= a005;
a010 -= a005;
a013 = a003 + a016;
a010 += a001;
a003 = a017 + a022;
a004 = a008 + cur;
a024 = a024 - a010;
a010 = a007 + a008;
a018 -= cur;
a008 = a003 + a020;
a012 -= a001;
a008 += a006;
} else {
}
a001 = a012 - a024;
a024 = a014 + a004;
cur = a007 - a024;
a013 += a001;
a000 = a014 + a007;
a017 += a020;
a013 = a009 * 0;
a010 = a015 - a023;
a006 -= 3;
a008 = a014 - a000;
a000 -= a004;
a011 = cur + a000;
a019 = a002 - a010;
a011 = a013 + a009;
cur = a005 + cur;
a008 -= a020;
a024 = a009 - a001;
a002 -= a012;
a002 = a006 + a001;
a019 = a004 + a023;
a007 = a019 - a005;
} else {
a010 += a015;
a015 = a015 + a010;
a022 = a018 + a015;
a004 = a010 + a005;
a016 = a016 + a012;
a005 -= a016;
cur -= a019;
a007 = a011 - a010;
a009 = a001 + a013;
a014 += a003;
a011 += a023;
a007 -= a018;
a002 += a019;
a010 += a022;
a002 += a005;
a007 += a020;
a010 += a001;
a007 = a015 - a006;
a020 = a015 + a024;
a024 += a018;
a009 -= a001;
a000 -= a003;
a014 -= a022;
a024 = a010 + a018;
a018 = a014 + a007;
a001 = a017 + a023;
}
a021 = a020 - a010;
a021 = a014 - a003;
a017 += a005;
a006 -= a007;
a002 = a022 - a020;
a013 += a018;
a012 += a020;
a005 -= a015;
a004 = a022 - a010;
a022 = a009 + a001;
a007 -= a013;
a003 = a000 - a000;
a023 = a013 - a007;
a007 -= a014;
a022 += a001;
a021 += a020;
a004 -= a016;
a011 += a020;
a003 += a008;
a019 += a017;
cur += a011;
a008 = a007 - a001;
cur -= cur;
a010 -= a013;
a006 = a013 - a024;
a013 = a006 - a002;
a023 -= -1;
a019 -= a013;
a016 -= a017;
a010 -= a007;
a003 -= a018;
a012 = a002 - a009;
a020 = a015 + a013;
a015 = a006 + a011;
a023 += a023;
a000 = a008 + a021;
a003 -= a017;
a016 = a021 + a003;
a003 -= a020;
a009 += a010;
a003 = a015 + a004;
a020 += cur;
a012 = a012 - cur;
a012 += a012;
a013 -= a022;
a010 -= a012;
}
output.collect(prefix, new IntWritable(a006));
}
