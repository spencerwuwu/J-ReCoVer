// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a010 += a012;
a016 = cur + 1;
a005 += a003;
a008 += a000;
a012 = a015 * -1;
if (a007 > a015) {
cur += a016;
a007 = a006 + 4;
} else {
a017 -= a014;
a017 = a017 + a012;
a019 = a006 - a018;
a002 = a014 - a000;
a006 = a005 + a019;
a001 = a016 + a011;
a014 = cur - a002;
}
cur = a004 + a012;
a011 += a001;
a003 -= a008;
if (a003 <= a006) {
a007 = a000 + a014;
a001 += a017;
a002 = a018 + a007;
cur -= a011;
a000 -= a011;
a010 += 2;
a001 = a001 + a001;
} else {
a005 += a008;
a017 = a015 - a016;
if (a008 <= a013) {
a012 -= a014;
a001 -= a019;
if (a003 > a015) {
a019 += a015;
a001 = a006 - a004;
a008 = a009 - a010;
a014 = a015 + a005;
a012 += a017;
a012 -= 0;
if (a014 <= a006) {
a011 += a019;
a000 = a010 + a002;
a008 -= a009;
if (a010 < a010) {
a011 -= a017;
a005 = a013 + a003;
a012 = a011 + a011;
a002 += a010;
a001 += -5;
if (a016 == a011) {
a016 += -4;
a008 += a009;
a004 = a018 - a014;
cur += a009;
cur = a002 + a014;
a013 += a008;
} else {
a010 = cur + a007;
a014 = a019 + a002;
}
a011 -= cur;
a011 = a004 - a005;
a012 = a014 + a013;
a010 -= a002;
cur = a012 + a011;
} else {
a008 = a018 + a019;
}
a013 = a013 - a016;
a009 -= a011;
} else {
a005 += a001;
a006 = a007 - a000;
a010 += a013;
if (a010 == a001) {
if (a013 < a012) {
a019 = a016 - a009;
a012 = a009 - a017;
a003 = a012 + a015;
} else {
a006 += a010;
a007 = a001 - a002;
a008 += a008;
a019 += a009;
a016 -= a011;
if (a018 < a010) {
a017 = a012 + a018;
a018 = a008 + a006;
a002 += cur;
if (a006 != a002) {
a011 += a000;
a014 -= a004;
a005 -= a009;
} else {
a000 += a015;
}
a010 = a018 - a015;
a000 = a004 - a000;
a001 = a007 - a002;
a015 = a003 - a001;
a012 -= 4;
} else {
a016 += a018;
a012 += a016;
a015 = a016 - a008;
a010 += a009;
}
a017 += a000;
a006 -= a007;
a015 = a017 + a000;
cur = -1 + a010;
a016 = a014 + a000;
}
a016 = a018 + a004;
a008 += a012;
a014 = a010 - a010;
} else {
a012 = a016 - a018;
a011 += a017;
a006 -= a006;
a016 = a006 - a017;
a011 = a010 - a002;
}
if (a018 <= a013) {
a009 += a018;
} else {
a014 = a011 + a001;
a010 += a019;
}
a001 += cur;
}
a010 = a012 - a002;
a001 = a008 + a006;
a014 += a005;
} else {
a010 = a006 - a006;
a002 = a017 - a014;
a008 = a011 - a008;
if (a008 <= a002) {
} else {
a001 = a015 + a007;
a008 = a014 - a018;
a010 = a001 - a015;
a011 -= a005;
}
a007 += cur;
a016 -= a018;
a002 = a006 - cur;
a011 += cur;
a011 = a017 - a011;
if (a010 != a011) {
a009 = a008 + a012;
if (a011 < a003) {
a008 = a016 + -1;
a012 = a002 - a003;
a016 -= a019;
a011 += a017;
a019 += a005;
if (a008 < a001) {
a013 += a015;
a017 = a013 - a013;
a011 = a007 + a002;
a014 = a009 + 2;
a005 = a003 + a000;
} else {
a011 = a007 - a010;
a014 = a002 + cur;
a011 -= a008;
a004 = a000 - a010;
a014 = a004 + cur;
a013 = a000 + a003;
a017 = a008 - a001;
}
a006 -= a007;
a011 = a002 - a004;
a003 += a011;
} else {
a019 = a014 - a002;
a015 += a011;
a006 = a017 - a015;
a004 -= a010;
cur = cur - a003;
a011 = a018 - a007;
if (a016 > a018) {
} else {
a012 = a011 - a000;
a011 += a018;
}
if (a004 > a006) {
a007 -= a002;
a009 = a012 - a011;
a010 = a012 + a018;
a001 -= a011;
a016 -= a007;
} else {
a001 += cur;
a012 = a013 + a015;
if (a006 > a004) {
a006 += a019;
a004 = a006 + cur;
} else {
a018 += a015;
a011 = a010 - 4;
a011 -= a001;
a004 -= a008;
a016 = a010 - 2;
a003 = a006 + a000;
a011 = a014 + a003;
if (a006 > a013) {
a002 = a012 + a009;
a010 = a016 + a010;
a009 = a015 + a018;
a003 = a016 - a009;
a016 -= a012;
a019 += a004;
} else {
a014 = a015 - a004;
a019 = a003 - cur;
a016 += a017;
a018 += a014;
a004 -= a017;
a018 = a017 + a011;
}
a018 += cur;
a000 = a008 - a013;
cur = a019 + a008;
}
a007 -= a013;
a019 = a002 - a016;
}
a013 = a007 - a006;
a015 = a018 + 1;
a010 = a006 + a000;
a008 -= a008;
a010 += a011;
}
a012 -= a004;
a003 = a009 + a006;
} else {
a019 -= a006;
a013 = a013 + a011;
a010 = -5 - a011;
}
}
a006 = a017 - a014;
cur -= a010;
a013 += a006;
a006 -= a008;
a010 += a014;
} else {
}
a012 += a012;
a008 -= a004;
}
a019 -= a006;
a017 -= a012;
a010 = a006 + a007;
a017 = a006 + -5;
}
output.collect(prefix, new IntWritable(a012));
}
