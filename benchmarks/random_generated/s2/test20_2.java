// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a012 -= a013;
a001 = a014 + a001;
a009 += a017;
a012 += a006;
a001 = a013 + a004;
a006 = a001 - a019;
if (cur > a014) {
a015 = a015 - a006;
cur += a014;
a000 = a001 + a013;
a005 -= a003;
a010 += a001;
a007 = a019 * -5;
a008 += a006;
if (a002 <= 1) {
cur = a006 + a005;
a004 -= a005;
a018 += a014;
a006 = a013 + a006;
} else {
cur = a000 + a011;
a018 = a011 - a003;
a000 = a005 - a015;
a000 = cur + a017;
a014 -= a009;
if (cur > a006) {
a000 += a014;
a005 = a014 + a015;
a001 = a005 * 3;
a003 += a016;
} else {
a004 = a016 + a001;
a001 -= a018;
a015 += a001;
a014 = a007 + a018;
a012 = a001 + a003;
}
a010 += a015;
a005 = a012 - a011;
}
a006 += a010;
a007 -= a002;
a001 = a001 - a002;
if (a014 <= a009) {
a000 -= a002;
a004 = a010 + a000;
} else {
}
a007 -= a013;
a015 = a008 - a018;
cur += a012;
a010 += a013;
a007 -= a003;
a004 += a007;
} else {
a010 -= a009;
a009 -= a018;
}
a000 -= a000;
a006 = a011 - a011;
a011 += a011;
if (a014 <= a018) {
a004 += a014;
a015 = a017 - a005;
} else {
a009 -= a005;
}
a001 = a003 - a005;
a006 -= a004;
a012 = a015 - a014;
a015 += a011;
if (a011 <= a007) {
cur = a004 - a011;
a000 = a004 - a009;
} else {
a004 += a012;
a005 -= a000;
a002 = a015 - a005;
a011 += a009;
a011 += a002;
if (a017 > a007) {
} else {
a005 = a002 - a014;
a000 = a015 - a005;
a014 += a009;
a006 -= a004;
a007 = cur + cur;
}
a007 -= a015;
a006 = a000 - a019;
a003 = a001 - a015;
a010 += a013;
a001 -= a002;
a018 = a015 - a008;
if (a002 < a004) {
if (a007 != a017) {
a008 += a003;
a001 += a002;
a005 -= a014;
a010 = a018 * -1;
a019 = a016 - a005;
} else {
a016 -= a019;
}
a015 -= a015;
a013 = a016 - a004;
a010 = a018 + a010;
a018 = a002 + a016;
} else {
a017 += a010;
a000 = a019 - a013;
if (a012 == a011) {
a005 += a004;
a014 = a012 + a011;
} else {
a018 += a015;
a003 += 3;
a017 += a009;
}
a013 = a004 - a003;
a018 = a012 + a014;
a006 = -4 + a016;
a019 -= a010;
a004 = a005 - a010;
a010 -= a009;
if (a005 != a011) {
a019 = a015 - a007;
a016 -= a004;
a003 -= a011;
} else {
a002 = a000 - a004;
}
a005 = a005 + cur;
a006 = a002 + a007;
a005 = a011 + a004;
a018 = a000 - a011;
a005 -= a005;
a011 = a017 + a010;
a004 = a002 + a008;
if (a016 != a003) {
a019 = a003 + a012;
a002 -= a005;
if (a011 != a015) {
a001 = a007 + a011;
a009 += a013;
} else {
a014 += a004;
a003 -= a001;
a015 = a015 - a018;
a019 = a017 + a005;
a001 = a001 * 1;
a003 = a006 + a008;
a009 = a007 + a019;
}
if (a003 == a002) {
a006 = a016 - a008;
if (a007 <= a001) {
a016 = a016 - a004;
a005 = a018 - a006;
a002 = a006 + a002;
a009 += a015;
a016 += a019;
a010 += a011;
if (a004 < a002) {
a007 -= a018;
a001 += a015;
a012 = a016 - a016;
} else {
a003 += 3;
a000 = a003 - a011;
a012 += cur;
cur = a011 - a014;
a010 = a014 + a012;
a001 = a017 + a002;
}
a002 += a016;
if (a014 <= a012) {
a013 = a013 - a015;
a019 -= a011;
} else {
a003 = a007 - a001;
a010 -= cur;
a011 = cur + -1;
a000 += a009;
a008 = a000 - a016;
}
cur -= a014;
if (a019 <= a002) {
a001 -= a001;
a007 -= a013;
a008 -= a005;
if (a001 == a008) {
cur = a016 + a017;
cur -= a008;
a001 = a005 - a002;
} else {
a004 = a006 + a002;
cur = a003 - a018;
a015 -= a008;
if (a012 >= a016) {
a011 += a019;
} else {
a016 = a012 + a019;
a019 -= a004;
a013 = a014 - a002;
a012 = a014 + a011;
a014 = a014 - a004;
cur = a012 * -3;
a001 -= a015;
}
}
a002 -= a005;
a003 = a018 + a014;
a008 += a015;
} else {
cur -= a006;
a016 = a012 - a016;
a007 -= a002;
a009 = a006 - cur;
}
} else {
a005 = a010 - a012;
a009 -= a014;
a011 += a011;
}
a005 = a007 - a011;
a013 += a007;
} else {
a011 = a012 + a019;
a007 -= a017;
a012 += a002;
}
cur = a019 - a010;
} else {
a009 = a015 + a008;
a002 += a004;
a005 = a000 + a010;
a000 += a014;
a019 += a002;
a011 -= a000;
a017 = cur - a006;
}
a012 = a002 + a010;
a010 += a009;
}
a005 = a019 - a011;
a003 = a001 + a019;
a012 = a005 * 0;
}
a002 -= a010;
a003 = cur + a011;
a009 -= a001;
a002 = a000 - a014;
a004 = a014 - cur;
a018 = a016 - a017;
a019 = a018 + a010;
a016 += a006;
a008 = a003 - a008;
a007 += a018;
a007 -= a006;
}
output.collect(prefix, new IntWritable(a010));
}
