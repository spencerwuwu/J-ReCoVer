// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a015 -= a015;
a010 -= a022;
a021 = a007 - a020;
a024 += a008;
a007 -= a000;
a001 = a006 + a001;
a024 -= a005;
a021 = a012 + a002;
a004 += a019;
a023 += a024;
a021 += a020;
a011 -= a008;
a002 = a006 - a019;
a018 += a017;
a010 -= a021;
a002 -= a010;
a010 = cur - cur;
a021 += a020;
if (a018 < a016) {
a021 += a002;
a024 = a006 - 1;
a013 = a021 + a005;
a012 -= a015;
a013 = a017 - a020;
a017 = cur + a016;
a001 = -1 - a001;
a004 = a022 - a023;
a002 -= a011;
a011 += a011;
a019 += a008;
a010 = a015 + a009;
a009 = a002 - a006;
cur = cur - a017;
} else {
a022 -= a015;
}
a003 += -5;
a009 = cur + a010;
a002 = a003 - a013;
a018 = a015 - a015;
a024 += a012;
a002 = a013 + 2;
a016 -= a001;
a001 += a018;
a011 = a017 + a023;
a009 += a012;
a007 = -2 - a000;
a004 -= a001;
a011 += a021;
a006 = a000 - a006;
a023 -= a019;
a003 = 2 + a008;
a006 = a000 - a005;
a004 -= a018;
a014 -= a013;
a003 = a008 + a019;
a023 += a016;
a007 = a004 + cur;
a001 = a003 - a007;
a014 = a006 + a017;
a010 += a023;
if (a011 >= cur) {
a014 = cur + a019;
a009 = a022 - a013;
a024 = a004 + a003;
a014 = a007 - a007;
a005 = a013 - a003;
a003 -= a022;
cur += a007;
a013 = a015 - a007;
a016 = a011 + a007;
a007 = a017 + a011;
a016 = a002 - a005;
a012 = a018 - a016;
cur = a015 + -3;
a012 = a001 + a007;
a002 -= a015;
a001 += a006;
a009 += a021;
a010 = a014 - cur;
a023 = a014 + a009;
a009 -= -4;
a022 = -4 - a005;
a022 -= a007;
} else {
a000 = a018 - a015;
a017 += a002;
a015 = a005 - a000;
a012 = cur * -3;
a007 = a004 + a019;
a019 = a010 - a024;
a012 = a002 + a024;
a000 += a011;
a013 = 3 + a007;
a007 -= a008;
a019 = a000 - a008;
a023 = a005 - a023;
a019 = a012 - a022;
a015 = a011 + a022;
a013 += a011;
a000 = a021 - a022;
a008 -= a004;
a009 -= cur;
a012 = a007 + a016;
a018 = a007 + a015;
a019 -= a012;
cur -= a002;
a000 += a004;
a020 = a020 + a024;
a012 = a011 + a021;
a006 -= a008;
a016 -= a011;
a000 = a017 + a016;
a015 -= a009;
}
a003 = a014 - a010;
a015 -= a008;
a003 = a022 - a014;
a021 = cur - a004;
a009 = a004 - a017;
a011 = a016 - a022;
a020 = a011 - a005;
a013 += a008;
a009 += a006;
a009 = a011 + a015;
a003 = a011 + a000;
a020 += a022;
a017 += a000;
a003 += a006;
a002 = a021 - a024;
a018 += 1;
a005 -= 0;
a005 = a015 * 2;
a009 -= a014;
a000 = a001 + a007;
a022 = a002 - a013;
a008 = a022 + a004;
a004 = a012 + a019;
a016 -= a024;
a014 += 4;
a021 = a010 - a018;
a016 = a006 + a020;
a005 += a004;
a004 = a024 + a007;
a019 += a016;
a020 += a005;
a010 += a010;
a019 = -5 - 4;
if (a011 >= 0) {
a019 -= a010;
a024 += a016;
a022 = a001 + cur;
a020 = a022 + a009;
a018 -= a000;
a010 -= a011;
a003 = a018 + a013;
a010 = a023 + a017;
a019 -= a010;
a003 -= a007;
cur = -2 + a003;
a000 = a006 - a023;
a020 -= a020;
a021 = a015 + a020;
a021 -= a001;
a016 = a007 - a008;
a010 += cur;
a013 += a013;
a009 += a005;
if (a021 <= a012) {
a020 += a012;
a023 = a016 - a018;
a006 = a012 - a017;
a009 -= a006;
a006 -= a000;
a012 += a009;
a014 -= cur;
a024 = a019 + a005;
} else {
a022 += a001;
a024 = a022 + a018;
a023 = a016 + a019;
a003 += a000;
a006 -= a001;
a009 = a008 + a021;
a010 += a005;
a008 -= a015;
a017 = cur + a017;
a001 -= a016;
a015 = a012 + a018;
a006 = a019 - a010;
if (a017 != a008) {
a012 -= a019;
a024 += a018;
} else {
a009 = cur - a007;
a003 += 3;
a020 += a009;
a015 = a014 - a007;
a024 = a016 + a015;
a000 -= a010;
a022 = a003 - 4;
a020 -= -1;
a005 = a005 + cur;
a020 -= a018;
a022 = a015 + a003;
a009 = a009 - a015;
a003 = a018 + a014;
a019 = a006 + -2;
a010 = a021 + a019;
a020 += a016;
a007 = a009 + a014;
a024 = a008 + a013;
a016 = a006 + a004;
}
a001 -= a009;
a021 -= a007;
a013 = a024 + a020;
a007 = a014 - a023;
a018 = a015 + a016;
a006 += a022;
a004 -= a003;
a003 = a007 - a010;
a023 += a020;
a000 -= a018;
a009 = a003 - 4;
a024 = a020 - a009;
a023 = a004 - a004;
a000 -= a024;
}
a019 = a007 - a017;
a002 += a009;
a021 = a014 - a013;
a014 -= a021;
a015 = a007 * 3;
a004 = a008 + a020;
a010 -= a006;
a017 += a004;
a011 = a016 + a024;
a011 -= a019;
a012 = a021 + a022;
a000 += a000;
a005 = a010 + a019;
a007 += a002;
a001 = a020 + a003;
a003 = a005 - a018;
a020 = a023 - a017;
a006 = a005 - a015;
a001 -= a011;
a016 += -5;
a022 = a014 - a021;
a019 -= a016;
a022 = a012 - a007;
a005 += a000;
} else {
a001 -= a019;
a004 = a010 + a018;
}
a002 = a008 - a003;
a000 = a001 - a021;
a010 -= 3;
a014 += a018;
a004 -= a001;
a006 += a017;
a024 = a007 - a024;
a004 -= a006;
}
output.collect(prefix, new IntWritable(a009));
}
