// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a009 = a019 + a008;
a009 = a012 - a019;
a007 -= 3;
a011 += a015;
a017 -= a007;
if (a001 > a011) {
a009 = a006 - a011;
cur -= a013;
a001 += a001;
a018 = a004 + a004;
a005 += a014;
if (a009 < -4) {
a001 -= a008;
a004 = 4 + a019;
a013 += a009;
a018 -= a016;
a013 = a002 + a013;
a019 -= a007;
if (a001 > a006) {
cur = a001 + -2;
a000 = a014 + a005;
a007 = a005 - cur;
a019 = a004 + a012;
a002 -= a011;
a003 = a013 + a013;
a006 = a008 + a001;
} else {
a007 += a010;
a001 = a010 - a013;
a013 = 4 - 1;
a001 = a005 - a004;
a010 += a004;
a009 -= a016;
if (a009 > a017) {
a014 += a007;
a013 = a019 - a012;
a014 = a001 + a003;
a014 = a017 + a012;
a014 -= cur;
cur += a016;
a004 = a010 + a016;
if (a003 < a001) {
a014 = a003 - a000;
a005 = a003 + a011;
if (a014 == a007) {
a012 += -4;
a015 -= a001;
a009 = a005 - a008;
a002 += a017;
a004 = a012 + a007;
a012 -= a010;
} else {
a019 = a012 + a004;
if (a006 >= a004) {
a006 += 1;
a003 -= a000;
a004 += a001;
a011 = a000 - a000;
a013 = a006 + a018;
} else {
a019 = a013 + cur;
if (a011 != a002) {
a015 += a016;
a007 = a000 + a009;
a008 = a017 - a013;
a013 = -1 - 0;
if (a003 > a016) {
a002 = a012 - a008;
a015 = a008 - a004;
} else {
if (a016 > a014) {
a000 = a003 - a001;
a011 = a010 - cur;
a019 -= 3;
a003 += a019;
a018 = a006 - a015;
a017 -= a000;
} else {
a017 += a012;
a013 -= a006;
a004 -= a010;
a005 = a017 - -4;
a011 = cur - a012;
a005 = a002 + a001;
if (a014 == a001) {
a010 = a014 - a007;
a018 += a005;
if (a016 > a016) {
a000 -= a016;
a015 = a019 - a016;
a011 = a019 - a001;
a018 += a001;
a007 -= a010;
cur = a001 - 3;
if (a018 < a010) {
a017 += a007;
a015 += cur;
if (a004 != a005) {
a009 += cur;
a011 -= a003;
a016 = a002 - a010;
a017 -= a018;
if (a010 >= a005) {
a006 -= a013;
a001 = a002 - 0;
} else {
a001 = a010 - a015;
a012 += a000;
a009 = 0 - a011;
a016 += a012;
a019 = a003 + a014;
a017 += a018;
if (a006 >= a000) {
a006 -= a006;
a007 = a013 + a011;
a002 = a017 + a002;
} else {
a011 = a016 - a004;
a018 = a008 + a019;
a009 = a000 - a007;
a004 = a012 - a013;
a013 -= a003;
a001 -= a006;
a010 += a017;
}
a010 = a011 - cur;
}
} else {
a011 = a013 - a013;
a007 -= a008;
a001 -= a017;
cur += a000;
a005 = a013 + a011;
a014 += a010;
a012 -= a019;
if (a004 == a005) {
a007 = a010 + a004;
a013 -= a015;
a012 = a017 + a008;
a000 = cur + a000;
a016 -= a017;
a006 -= a000;
a019 = a014 - a018;
} else {
a002 = cur + a015;
a007 = a002 + a009;
a009 += a012;
a017 = a006 - a007;
a003 -= 3;
a018 -= a013;
a006 -= a007;
}
a014 = a000 - a011;
a015 = cur - a007;
a001 -= a014;
a002 = a004 + a001;
a015 -= a004;
if (a004 <= a011) {
a005 = a005 - a016;
a010 += a014;
a010 -= a016;
a015 += a016;
if (a007 != a012) {
a013 = a003 + a017;
a018 -= a008;
} else {
if (a016 <= a006) {
a000 -= a007;
a017 -= a001;
a017 = a000 + a011;
a012 = 2 - a016;
a010 += a003;
a016 = a018 - a018;
a016 -= -5;
} else {
a019 = a014 - a005;
a004 = a004 - a018;
a010 += a004;
a016 = a003 + a013;
a014 += a016;
a010 -= a018;
}
a015 -= a007;
a001 = a015 + a000;
}
cur -= cur;
a001 += -2;
a019 = a007 - cur;
a002 = a010 - a000;
a002 += a004;
cur = a012 + a006;
a007 += a017;
} else {
a003 -= a017;
a014 = a014 + a016;
a001 -= a016;
a002 = a006 - a010;
a019 = 2 - a016;
}
a006 -= a007;
a003 = cur + a017;
a004 = a006 + a004;
a019 -= a012;
a008 += a009;
}
a005 = a011 - a019;
a009 = a017 + a015;
a002 = a002 + a017;
a006 = a015 + a010;
a008 = a019 + a019;
a008 += a003;
a015 = a007 + cur;
} else {
cur = a015 - a014;
}
a012 += a010;
a000 -= a007;
} else {
a004 = a018 + a000;
a013 -= a014;
a017 = a000 + a017;
}
a009 = a008 + a003;
a011 = a014 + a001;
} else {
a011 = a009 - a010;
}
a010 += a006;
}
a006 = a008 - a017;
a014 = a003 + a005;
a006 = a009 - cur;
a014 = a006 + a007;
}
a001 = a018 * -5;
a008 = a004 + a011;
a019 = a004 + a014;
a000 = a010 + a012;
} else {
a000 = a016 - a006;
a004 = a002 - a013;
a008 = a014 + a017;
}
a010 += cur;
a009 += a018;
a019 = a015 + a017;
a009 -= cur;
a007 -= a019;
a018 = cur - a017;
}
}
} else {
}
} else {
}
}
} else {
}
} else {
}
}
output.collect(prefix, new IntWritable(a014));
}
