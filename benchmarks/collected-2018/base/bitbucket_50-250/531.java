// https://searchcode.com/api/result/122823812/

package ramos.localhistory.ui;

import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import ramos.localhistory.CleanUp;

final class LocalHistoryPanel extends javax.swing.JPanel {
  
  private final LocalHistoryOptionsPanelController controller;
  
  LocalHistoryPanel(LocalHistoryOptionsPanelController controller) {
    this.controller = controller;
    initComponents();
    // TODO listen to changes in form fields and call controller.changed()
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {

    jButton1 = new javax.swing.JButton();
    revisionCountTextField = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jSeparator1 = new javax.swing.JSeparator();

    setBackground(new java.awt.Color(255, 255, 255));
    setBorder(javax.swing.BorderFactory.createTitledBorder("Local History Clean Up"));
    setEnabled(false);

    org.openide.awt.Mnemonics.setLocalizedText(jButton1, "do clean up now");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        performCleanup(evt);
      }
    });

    revisionCountTextField.setColumns(2);
    revisionCountTextField.setText("50");
    revisionCountTextField.setInputVerifier(new MyVerifier());

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "maximal number of copies per file:");

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "You can start a clean up that will reduce the number");

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "of copies per file to the number you specify below.");

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, "The most recent copies will remain.");

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, "After the clean up has been done, the number of");

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, "deleted copies will be shown to you in a dialog.");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
          .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
            .add(jLabel2)
            .add(jLabel3)
            .add(jLabel4)
            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jLabel6))
          .add(jButton1)
          .add(layout.createSequentialGroup()
            .add(jLabel1)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(revisionCountTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(jLabel2)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jLabel3)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jLabel4)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jLabel5)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jLabel6)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel1)
          .add(revisionCountTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jButton1)
        .addContainerGap(17, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  
  private void performCleanup(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performCleanup
    // TODO add your handling code here:
    String text = revisionCountTextField.getText();
    int count;
    try {
      count = Integer.parseInt(text);
    } catch (NumberFormatException ex) {
      JOptionPane.showMessageDialog(null,"fill in a valid number","No valid number",JOptionPane.WARNING_MESSAGE);
      return;
    }
    int deleted = CleanUp.doCleanUp(count);
    String feedbackText = deleted +" copies were removed";
    if (deleted == 1){
      feedbackText = deleted +" copy was removed";
    }
    JOptionPane.showMessageDialog(null,feedbackText,"Done",JOptionPane.INFORMATION_MESSAGE);
  }//GEN-LAST:event_performCleanup
  
  void load() {
    // TODO read settings and initialize GUI
    // Example:
    // someCheckBox.setSelected(Preferences.userNodeForPackage(LocalHistoryPanel.class).getBoolean("someFlag", false));
    // or:
    // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
  }
  
  void store() {
    // TODO store modified settings
    // Example:
    // Preferences.userNodeForPackage(LocalHistoryPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or:
    // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
  }
  
  boolean valid() {
    // TODO check whether form is consistent and complete
    return true;
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JTextField revisionCountTextField;
  // End of variables declaration//GEN-END:variables
  
  private static class MyVerifier extends InputVerifier{
    public boolean verify(JComponent input) {
      JTextField tf = (JTextField) input;
      if (tf.getText().length() == 0) return true;
      try {
        Integer.parseInt(tf.getText());
      } catch (NumberFormatException ex) {
        return false;
      }
      return true;
    }
    
  }
}

