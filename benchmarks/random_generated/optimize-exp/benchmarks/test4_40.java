// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 4

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a015 = a005 + a010;
a006 += a006;
cur = a002 + a007;
a016 = a016 - cur;
a004 += a019;
a008 -= a010;
a008 = a015 * 0;
a009 -= a019;
a007 -= a008;
a004 -= a005;
a012 = a018 + a010;
a009 = a017 + a018;
a003 = a002 + a011;
a004 = a018 - a018;
a004 = a016 - a008;
a019 = a009 + a019;
a011 = a010 + a000;
a003 += a006;
a014 -= a001;
a019 += a004;
a007 = cur * 1;
a001 = a009 - a007;
a017 -= a010;
a015 += a007;
a008 -= a009;
a002 += a016;
if (a014 >= a005) {
a015 = a015 + a014;
a003 -= a005;
a017 = a017 + a004;
a012 = a016 + a017;
a017 = a009 + a005;
a012 = a010 + 2;
if (a011 >= a015) {
a012 -= a007;
a000 += a007;
a017 += a011;
a000 = a012 - cur;
a019 -= a000;
a010 += a002;
a006 += a019;
a005 -= a015;
a010 = a009 + a011;
a004 += a011;
a005 += 4;
a011 += a015;
a014 += a019;
a019 = a019 + a019;
a007 -= a002;
a014 += a013;
a016 -= a014;
} else {
a018 = a016 - a007;
a019 -= a004;
a019 = a010 + a007;
a005 -= a016;
a002 = a019 - a014;
a016 = a019 + a013;
a000 = a011 - a008;
a019 = a000 - a005;
a008 = 0 - a010;
a013 = a007 + a013;
a008 += a017;
a003 += a003;
cur += a019;
a015 = a001 - a002;
a004 += a002;
a001 -= a003;
a014 = a014 - a008;
a019 = a000 + a008;
a002 += a015;
a006 = a010 - a005;
a002 = a007 + a006;
cur = a008 + 4;
}
a005 = a006 + a006;
a014 -= a019;
cur += a010;
a016 -= a004;
a019 -= a010;
a019 = a005 - cur;
a008 = a004 + a017;
a000 += a017;
a001 = a000 + a014;
a006 += a008;
a010 += a004;
a014 = a013 - a000;
a015 = a019 + a009;
a008 = a011 - a012;
a014 += a009;
a012 = a018 - a012;
a012 -= a014;
a016 += a018;
cur -= a007;
cur = a000 - a017;
a014 += a014;
a018 = a018 + a017;
a006 = a005 + -3;
a015 = a011 + a005;
a018 += a000;
a016 -= a019;
if (a019 >= a012) {
a010 = -3 - a005;
a000 -= a010;
a018 = a019 - a016;
a016 = cur + a019;
a010 -= a013;
a015 = a006 + a006;
cur = a001 - a014;
a001 -= a014;
a012 = a003 + a018;
a005 += a000;
a015 += a010;
a014 -= a010;
a016 += a014;
a001 = a014 - 4;
a019 = a015 - a017;
a018 = a011 + a006;
a010 = a006 + a004;
a007 -= a019;
a018 -= a003;
a008 -= a012;
a007 -= a008;
a000 = a013 - a015;
a006 -= a008;
a002 += a014;
a007 += a000;
a003 = a001 + a014;
a002 = a013 + a002;
} else {
if (a004 < a012) {
a004 -= a003;
a008 += a001;
a000 -= a014;
a002 = a002 + a014;
a004 += a003;
a015 -= a003;
a014 = a011 + a008;
a000 = a001 - a010;
a015 += a009;
a011 += a004;
a012 += a007;
a003 = a013 - 4;
a013 += a004;
a019 -= -5;
a001 += a012;
a016 = a005 + a018;
a006 += a018;
a015 -= a007;
a010 += a016;
a006 += a012;
a010 -= -5;
a016 += a009;
a001 -= a011;
a019 += a004;
a005 = a001 - a019;
a015 += a005;
a007 = a012 - a007;
a018 = a012 + a019;
a002 += a001;
cur = a014 + 3;
a000 = a010 - a003;
a007 = -3 - a014;
} else {
a014 = 2 - a010;
a003 = cur - a001;
a004 = a016 + a013;
a016 = a012 - a000;
a002 = a016 + 3;
a011 += a016;
a005 = a004 - a012;
a006 -= a001;
a008 = a000 + a000;
a017 -= a015;
a008 += a018;
a019 += a018;
a007 = a014 + a007;
a002 -= a002;
}
a018 = a012 - a000;
cur = a010 + a009;
a014 = a013 + a005;
a002 -= a019;
a008 = a008 + a002;
a000 = a004 + 2;
a006 = a011 + a001;
a009 += a014;
a010 += a009;
cur += a018;
a010 = a019 - cur;
a001 = a014 + a000;
a002 = a013 - cur;
a016 = a007 - a019;
a019 = a015 + a010;
a010 = a003 + a014;
a009 -= a014;
a013 -= a008;
cur += a006;
a004 += a003;
a004 -= a016;
a003 -= 0;
a009 -= a002;
a013 = a011 - a005;
}
a011 -= a014;
a002 = a009 + a007;
} else {
a005 = a009 - a000;
a005 -= a006;
}
a018 = a004 - a002;
a003 -= a000;
}
output.collect(prefix, new IntWritable(a016));
}
