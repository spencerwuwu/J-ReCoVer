// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a023 += a018;
a002 = a008 + a015;
a021 = a012 + a012;
a007 = cur - a017;
a014 -= a023;
if (a018 < cur) {
a016 -= a005;
a004 = a018 - a016;
a021 = a009 + a003;
a021 = -3 - a002;
a009 = a004 + a001;
a009 = a005 + a003;
a020 -= a018;
} else {
a004 = a002 + cur;
a004 = a024 - a012;
cur -= a000;
a013 += a013;
a012 += a023;
cur -= a016;
a024 += a008;
a006 = a007 - a007;
a018 = a004 - 0;
a007 = cur + cur;
a013 = a012 - cur;
a015 = a014 + a023;
a020 = cur - a022;
a012 = a005 + a015;
a006 = a006 + a022;
a004 = a009 + a003;
a005 = 1 - a019;
a013 = cur - a011;
cur += a013;
a012 -= a023;
a024 += a005;
a013 -= a021;
a019 = a013 + a010;
if (a001 == a009) {
a012 = a004 + a005;
a006 += a008;
cur -= a016;
a015 = a014 - a000;
a022 = a021 + a009;
a003 -= a007;
a019 = a015 + a015;
a007 -= a001;
a001 -= a002;
a024 += -5;
a008 += a015;
a004 -= a002;
cur += a000;
} else {
a018 = a002 + a024;
a016 = a013 - a010;
a021 = a022 + a021;
a011 = a024 + a006;
a018 = a005 - a011;
a005 = a023 - a011;
a018 = 1 - a001;
a020 -= a017;
a005 = a003 - a001;
a001 = a022 + a003;
a024 -= a010;
a001 = a011 - a012;
a018 = a010 - a015;
a007 += a015;
a013 = a012 - a024;
a001 = cur + a021;
a023 -= a008;
a018 = a017 + a017;
a023 = a000 - a013;
a016 -= a009;
cur = a014 + a015;
a018 = a004 - a020;
a008 += cur;
a013 = a003 - a006;
a023 = a015 - a010;
a002 += a013;
a012 = a015 + -1;
a002 = a008 - a005;
a007 = a021 - a010;
a009 = a004 - cur;
a016 -= a019;
a009 = a004 - a008;
if (a006 <= a011) {
a024 = a017 - a004;
a011 = a019 + a014;
a003 += a018;
a019 += a015;
a023 = a003 + a013;
a003 -= a016;
a013 = a017 - a001;
a023 += a019;
cur -= a023;
a021 = a015 + a014;
a010 = a024 - a004;
a022 = a018 - a021;
a012 -= a012;
a003 += -2;
if (a023 <= a020) {
a022 += a009;
a001 -= a021;
a021 += -3;
a003 = a009 + a023;
a004 = a017 + a005;
a001 += -5;
a016 -= a008;
a018 += a017;
a006 += a008;
a018 += a018;
a010 = a019 + a024;
a008 = a000 + a018;
cur -= a014;
a015 -= a021;
a000 = -1 - a010;
a006 += a017;
a006 = a006 - a005;
a024 += a012;
a016 = a018 + a016;
a015 = a012 - a011;
a004 = a003 - a011;
a017 += a021;
a002 -= a024;
a012 = a013 + a010;
a003 += a006;
if (a016 > a024) {
a018 = a020 - a003;
a019 = a002 + a016;
a000 = a010 + a009;
a008 += a020;
a011 = a011 + a017;
a001 -= a003;
a005 = a016 - a015;
a007 += a008;
} else {
a016 += a001;
a013 = a008 + a024;
a010 -= a017;
a000 += a009;
a010 = a021 - a017;
a021 += a020;
}
a000 += a018;
a000 = a007 + a021;
a018 = cur - a019;
a007 = a009 - a022;
a001 = a011 - a020;
a014 = a012 + a013;
a018 -= a017;
a017 = a022 - a018;
a013 -= -2;
a009 = a003 + a012;
a002 = a003 + a019;
a007 += a010;
a019 -= a018;
a018 -= a014;
a003 = a005 - -3;
a014 = a018 - a012;
a010 -= a007;
a009 = a017 * 3;
} else {
a001 += a005;
}
a021 = a015 + a021;
} else {
cur = a019 - a024;
a000 = a010 - a015;
a002 = a001 - a018;
a010 += a015;
a020 = a011 - a010;
a022 = a007 + a011;
a001 = a002 - 0;
a007 = a001 - a020;
a005 = a000 - a008;
a002 = cur + a022;
a022 += a013;
a009 -= a018;
a018 += a023;
a011 = -4 - a005;
a019 -= a018;
a014 = a003 + a006;
a005 = cur - a000;
a014 -= a000;
a007 = a008 - a013;
a008 = a009 + a015;
a020 -= a012;
a010 = a007 - a004;
}
a024 += a019;
a003 = a003 + a005;
a009 -= a008;
a009 = a013 + a001;
a015 += a024;
a020 = a000 + a007;
a017 -= a008;
a023 -= a002;
}
cur += cur;
a010 = a023 - a000;
a002 = a017 + 1;
a003 = a006 - a010;
a020 = a000 + a016;
a018 -= a006;
a018 += a003;
a022 -= a019;
a024 = a023 - a005;
a012 += a001;
a010 = a015 + a023;
a009 += a003;
a002 = a003 - a024;
}
a013 = cur + cur;
a001 = a005 + a015;
a019 -= a002;
a009 += a001;
a022 -= a011;
a012 += a011;
a002 = a023 - a006;
a019 += a022;
a006 = a000 + a000;
a023 += a005;
a021 = a010 - a010;
a010 = a002 + a002;
a020 += a013;
a003 = a010 - a011;
a023 = a015 - a004;
a007 = cur * 1;
a016 = a015 - a020;
a018 = a004 - a019;
a001 = a017 + a000;
a001 -= a011;
a008 += a012;
a013 = a015 + a020;
a015 += a013;
a006 -= a002;
a001 = a011 + a024;
a000 += 2;
a019 = a004 - a009;
a021 = a012 + a021;
a001 = a004 + a009;
a004 += a024;
a017 = a014 - a003;
a001 -= a011;
a003 = a012 - a002;
a002 = a018 - a020;
a005 = a005 * -3;
cur += a018;
a020 = a022 + a014;
a013 -= a010;
a004 += a021;
a021 = 4 + a018;
a010 = a024 + a021;
cur += a001;
a020 = a005 - a004;
a013 = a013 + a022;
a015 += a015;
a013 += a007;
a022 += a013;
a008 = a020 + a002;
a013 += a022;
a004 += a011;
a013 -= a018;
a019 = a020 - a022;
a024 = a006 + a024;
a011 = a008 - a004;
}
output.collect(prefix, new IntWritable(a011));
}
