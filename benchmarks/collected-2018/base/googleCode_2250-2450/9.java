// https://searchcode.com/api/result/12104164/


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 05 17:22:13 GMT-03:00 2011
//----------------------------------------------------

package analisadorSintatico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import analisadorSemantico.SemanticAnalyzer;
import analisadorSemantico.Node;
import geradorDeCodigo.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 05 17:22:13 GMT-03:00 2011
  */
public class ParserOCL extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserOCL() {super();}

  /** Constructor which sets the default scanner. */
  public ParserOCL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserOCL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\042\004" +
    "\000\002\042\002\000\002\005\004\000\002\006\006\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\011\010\000\002\011\010\000\002\011" +
    "\007\000\002\011\007\000\002\011\006\000\002\011\005" +
    "\000\002\012\004\000\002\043\005\000\002\043\002\000" +
    "\002\013\005\000\002\014\003\000\002\015\004\000\002" +
    "\044\005\000\002\044\002\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\017\003\000\002\056\005\000\002\056\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\004\000\002\045\005\000\002\045\005\000\002\045\002" +
    "\000\002\022\004\000\002\046\005\000\002\046\005\000" +
    "\002\046\002\000\002\023\004\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\004\000\002\057" +
    "\002\000\002\026\006\000\002\026\005\000\002\026\002" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\006\000\002\030\005\000\002\031" +
    "\006\000\002\031\005\000\002\047\005\000\002\033\011" +
    "\000\002\060\002\000\002\034\006\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\061\002\000\002" +
    "\054\005\000\002\055\006\000\002\055\005\000\002\055" +
    "\005\000\002\055\004\000\002\035\005\000\002\050\007" +
    "\000\002\050\005\000\002\051\005\000\002\051\002\000" +
    "\002\036\004\000\002\036\002\000\002\052\005\000\002" +
    "\052\002\000\002\037\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\006\000\002\041\004" +
    "\000\002\053\005\000\002\053\002\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\004\007\001\002\000\006\005\057\006" +
    "\060\001\002\000\004\002\055\001\002\000\006\002\ufffe" +
    "\004\007\001\002\000\004\057\010\001\002\000\100\002" +
    "\uff9f\004\uff9f\005\uff9f\006\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023" +
    "\047\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\001\002\000\010" +
    "\005\ufff5\006\ufff5\013\ufff5\001\002\000\006\005\ufffa\006" +
    "\ufffa\001\002\000\004\013\014\001\002\000\006\014\016" +
    "\057\015\001\002\000\004\022\044\001\002\000\010\005" +
    "\uffef\006\uffef\022\041\001\002\000\006\014\uffec\021\035" +
    "\001\002\000\004\014\021\001\002\000\010\005\ufff0\006" +
    "\ufff0\022\022\001\002\000\012\050\023\051\024\052\027" +
    "\057\010\001\002\000\014\005\uffa4\006\uffa4\014\uffa4\017" +
    "\uffa4\021\uffa4\001\002\000\014\005\uffa3\006\uffa3\014\uffa3" +
    "\017\uffa3\021\uffa3\001\002\000\006\005\ufff4\006\ufff4\001" +
    "\002\000\006\005\ufff3\006\ufff3\001\002\000\004\013\030" +
    "\001\002\000\012\050\023\051\024\052\027\057\010\001" +
    "\002\000\004\014\034\001\002\000\010\014\uffa6\017\uffa6" +
    "\021\uffa6\001\002\000\010\014\uffa5\017\uffa5\021\uffa5\001" +
    "\002\000\014\005\uffa2\006\uffa2\014\uffa2\017\uffa2\021\uffa2" +
    "\001\002\000\004\057\015\001\002\000\004\014\uffee\001" +
    "\002\000\006\014\uffec\021\035\001\002\000\004\014\uffed" +
    "\001\002\000\012\050\023\051\024\052\027\057\010\001" +
    "\002\000\006\005\ufff1\006\ufff1\001\002\000\006\005\ufff2" +
    "\006\ufff2\001\002\000\012\050\023\051\024\052\027\057" +
    "\010\001\002\000\006\014\uffeb\021\uffeb\001\002\000\076" +
    "\002\uffa1\004\uffa1\005\uffa1\006\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\001\002\000\004\057" +
    "\050\001\002\000\100\002\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\023\047\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\001\002\000\076\002\uffa0\004\uffa0\005\uffa0\006" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\001\002\000\006\002\ufffe\004\007\001\002\000\004" +
    "\002\000\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\022\066\057\065\001\002\000\006" +
    "\022\ufff7\057\ufff7\001\002\000\006\022\ufff6\057\ufff6\001" +
    "\002\000\012\002\ufffb\004\ufffb\005\057\006\060\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\012\002\ufffb\004" +
    "\ufffb\005\057\006\060\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\022\260\001\002\000\032\007\076\013" +
    "\100\031\112\036\072\046\115\047\117\052\075\053\105" +
    "\054\070\055\107\056\113\057\010\001\002\000\064\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\014\uffcf\016\uffcf\020\uffcf\021\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000" +
    "\070\002\uff9e\004\uff9e\005\uff9e\006\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\014\uff9e\016\uff9e\020\uff9e\021\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\001\002\000\070\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\020" +
    "\uffc8\021\uffc8\024\224\025\225\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000\026" +
    "\007\uffce\013\uffce\046\uffce\047\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\001\002\000\030\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea\012\uffea\014" +
    "\uffea\016\uffea\020\uffea\021\uffea\001\002\000\070\002\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\016\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\001\002\000\004\015\207\001\002\000\032\007\076\013" +
    "\100\031\112\036\072\046\115\047\117\052\075\053\105" +
    "\054\070\055\107\056\113\057\010\001\002\000\054\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\016\uffe1\020\uffe1\021\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\037\167\040\170\041\172\042\171\043\173" +
    "\044\175\001\002\000\032\007\076\013\100\031\112\036" +
    "\072\046\115\047\117\052\075\053\105\054\070\055\107" +
    "\056\113\057\010\001\002\000\064\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\016\uffd1" +
    "\020\uffd1\021\uffd1\026\156\027\160\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\001\002\000\070\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\016\uffc7\020\uffc7\021\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\001" +
    "\002\000\040\002\uffe7\004\uffe7\005\uffe7\006\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7\032" +
    "\150\033\152\034\153\035\147\001\002\000\060\002\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5\014" +
    "\uffd5\016\uffd5\020\uffd5\021\uffd5\030\140\031\141\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\001\002\000\070\002\uff9c\004\uff9c" +
    "\005\uff9c\006\uff9c\010\uff9c\011\uff9c\012\uff9c\014\uff9c\016" +
    "\uff9c\020\uff9c\021\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\001\002" +
    "\000\012\002\ufff8\004\ufff8\005\ufff8\006\ufff8\001\002\000" +
    "\070\002\uff9d\004\uff9d\005\uff9d\006\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\014\uff9d\016\uff9d\020\uff9d\021\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\001\002\000\026\007\076\013\100\046\115" +
    "\047\117\052\075\053\105\054\070\055\107\056\113\057" +
    "\010\001\002\000\070\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\014\uffc1\016\uffc1\020\uffc1\021" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000\026\007\uffcd" +
    "\013\uffcd\046\uffcd\047\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\001\002\000\070\002\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\010\uff9b\011\uff9b\012\uff9b\014\uff9b\016" +
    "\uff9b\020\uff9b\021\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\001\002" +
    "\000\074\002\uffb6\004\uffb6\005\uffb6\006\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\124\014\uffb6\016\uffb6\020\uffb6\021\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\122\001\002\000\004\024" +
    "\120\001\002\000\070\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\014\uffc4\016\uffc4\020\uffc4\021" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\001\002\000\070\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\014" +
    "\uffc5\016\uffc5\020\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\001\002\000\004\057\010\001\002\000\070\002\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3" +
    "\016\uffc3\020\uffc3\021\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\001" +
    "\002\000\072\002\uffb7\004\uffb7\005\uffb7\006\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffba\014\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\001\002\000\070\002\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\014" +
    "\uffb8\016\uffb8\020\uffb8\021\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\001\002\000\034\007\076\013\100\014\uffa9\031\112\036" +
    "\072\046\115\047\117\052\075\053\105\054\070\055\107" +
    "\056\113\057\010\001\002\000\004\014\133\001\002\000" +
    "\006\014\uffa7\021\127\001\002\000\032\007\076\013\100" +
    "\031\112\036\072\046\115\047\117\052\075\053\105\054" +
    "\070\055\107\056\113\057\010\001\002\000\004\014\uffaa" +
    "\001\002\000\006\014\uffa7\021\127\001\002\000\004\014" +
    "\uffa8\001\002\000\070\002\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\014\uffaf\016\uffaf\020\uffaf\021" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\001\002\000\004\013\124" +
    "\001\002\000\070\002\uffb9\004\uffb9\005\uffb9\006\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\014\uffb9\016\uffb9\020\uffb9\021\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\001\002\000\064\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0" +
    "\016\uffd0\020\uffd0\021\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\054\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\014\uffd8\016\uffd8\020\uffd8\021\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\001\002\000\032\007\076\013\100\031\112\036" +
    "\072\046\115\047\117\052\075\053\105\054\070\055\107" +
    "\056\113\057\010\001\002\000\032\007\076\013\100\031" +
    "\112\036\072\046\115\047\117\052\075\053\105\054\070" +
    "\055\107\056\113\057\010\001\002\000\060\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\030\140\031\141\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\001\002\000\054\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\016\uffd6" +
    "\020\uffd6\021\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002" +
    "\000\060\002\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\016\uffd5\020\uffd5\021\uffd5\030\140" +
    "\031\141\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002\000\054" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\014\uffd7\016\uffd7\020\uffd7\021\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\001\002\000\032\007\076\013\100\031\112" +
    "\036\072\046\115\047\117\052\075\053\105\054\070\055" +
    "\107\056\113\057\010\001\002\000\032\007\uffe3\013\uffe3" +
    "\031\uffe3\036\uffe3\046\uffe3\047\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000\032\007\uffe6" +
    "\013\uffe6\031\uffe6\036\uffe6\046\uffe6\047\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\001\002\000\030" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\001\002\000\032" +
    "\007\uffe5\013\uffe5\031\uffe5\036\uffe5\046\uffe5\047\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002" +
    "\000\032\007\uffe4\013\uffe4\031\uffe4\036\uffe4\046\uffe4\047" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\040\002\uffe7\004\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\032\150\033\152\034\153\035\147\001\002\000\030\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\016\uffe8\020\uffe8\021\uffe8\001\002\000\032\007" +
    "\076\013\100\031\112\036\072\046\115\047\117\052\075" +
    "\053\105\054\070\055\107\056\113\057\010\001\002\000" +
    "\060\002\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\014\uffd4\016\uffd4\020\uffd4\021\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002\000\032\007" +
    "\076\013\100\031\112\036\072\046\115\047\117\052\075" +
    "\053\105\054\070\055\107\056\113\057\010\001\002\000" +
    "\064\002\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\016\uffd1\020\uffd1\021\uffd1\026\156\027" +
    "\160\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\001" +
    "\002\000\060\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\014\uffd2\016\uffd2\020\uffd2\021\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001\002\000" +
    "\064\002\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\016\uffd1\020\uffd1\021\uffd1\026\156\027" +
    "\160\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\001" +
    "\002\000\060\002\uffd3\004\uffd3\005\uffd3\006\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\016\uffd3\020\uffd3\021\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\001\002\000" +
    "\004\014\166\001\002\000\070\002\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\001\002\000\032" +
    "\007\uffde\013\uffde\031\uffde\036\uffde\046\uffde\047\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002" +
    "\000\032\007\uffdc\013\uffdc\031\uffdc\036\uffdc\046\uffdc\047" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\001\002\000\032\007\uffdd\013\uffdd\031\uffdd\036\uffdd\046" +
    "\uffdd\047\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\032\007\uffda\013\uffda\031\uffda\036" +
    "\uffda\046\uffda\047\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\001\002\000\032\007\uffdb\013\uffdb\031" +
    "\uffdb\036\uffdb\046\uffdb\047\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\001\002\000\040\002\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2" +
    "\016\uffe2\020\uffe2\021\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\001\002\000\032\007\uffd9\013\uffd9\031\uffd9\036\uffd9" +
    "\046\uffd9\047\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\001\002\000\032\007\076\013\100\031\112" +
    "\036\072\046\115\047\117\052\075\053\105\054\070\055" +
    "\107\056\113\057\010\001\002\000\054\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\037\167\040\170\041\172\042\171\043\173\044\175\001" +
    "\002\000\040\002\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\014\uffe0\016\uffe0\020\uffe0\021\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002\000\004\010\202" +
    "\001\002\000\032\007\076\013\100\031\112\036\072\046" +
    "\115\047\117\052\075\053\105\054\070\055\107\056\113" +
    "\057\010\001\002\000\004\011\204\001\002\000\032\007" +
    "\076\013\100\031\112\036\072\046\115\047\117\052\075" +
    "\053\105\054\070\055\107\056\113\057\010\001\002\000" +
    "\004\012\206\001\002\000\070\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\016\uffbb\020" +
    "\uffbb\021\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\001\002\000\034" +
    "\007\076\013\100\016\210\031\112\036\072\046\115\047" +
    "\117\052\075\053\105\054\070\055\107\056\113\057\010" +
    "\001\002\000\070\002\uffbf\004\uffbf\005\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\014\uffbf\016\uffbf\020\uffbf\021\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\001\002\000\006\020\215\021" +
    "\214\001\002\000\004\016\213\001\002\000\070\002\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\016\uffc0\020\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\001\002\000\032\007\076\013\100\031\112\036\072\046" +
    "\115\047\117\052\075\053\105\054\070\055\107\056\113" +
    "\057\010\001\002\000\032\007\076\013\100\031\112\036" +
    "\072\046\115\047\117\052\075\053\105\054\070\055\107" +
    "\056\113\057\010\001\002\000\004\016\uffbd\001\002\000" +
    "\004\021\220\001\002\000\032\007\076\013\100\031\112" +
    "\036\072\046\115\047\117\052\075\053\105\054\070\055" +
    "\107\056\113\057\010\001\002\000\004\016\uffbe\001\002" +
    "\000\004\021\220\001\002\000\004\016\uffbc\001\002\000" +
    "\004\057\010\001\002\000\004\057\010\001\002\000\064" +
    "\002\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\014\uffcc\016\uffcc\020\uffcc\021\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002" +
    "\000\004\013\uffb5\001\002\000\070\002\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8" +
    "\020\uffc8\021\uffc8\024\224\025\225\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000" +
    "\064\002\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\016\uffc9\020\uffc9\021\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001" +
    "\002\000\004\013\234\001\002\000\070\002\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\016" +
    "\uffb4\020\uffb4\021\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\001\002" +
    "\000\034\007\076\013\100\014\235\031\112\036\072\046" +
    "\115\047\117\052\075\053\105\054\070\055\107\056\113" +
    "\057\236\001\002\000\070\002\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\014\uffb0\016\uffb0\020\uffb0" +
    "\021\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\001\002\000\060\013" +
    "\uff9f\014\uff9f\017\uffab\021\245\022\uffab\023\047\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\001\002\000\004\014\244\001" +
    "\002\000\034\007\076\013\100\014\241\031\112\036\072" +
    "\046\115\047\117\052\075\053\105\054\070\055\107\056" +
    "\113\057\010\001\002\000\070\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\016\uffb2\020" +
    "\uffb2\021\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\001\002\000\004" +
    "\014\243\001\002\000\070\002\uffb3\004\uffb3\005\uffb3\006" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000\070\002" +
    "\uffb1\004\uffb1\005\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\014\uffb1\016\uffb1\020\uffb1\021\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\001\002\000\004\057\253\001\002\000\006\017\250" +
    "\022\247\001\002\000\012\050\023\051\024\052\027\057" +
    "\010\001\002\000\034\007\uffad\013\uffad\014\uffad\031\uffad" +
    "\036\uffad\046\uffad\047\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\001\002\000\004\017\252\001\002" +
    "\000\034\007\uffae\013\uffae\014\uffae\031\uffae\036\uffae\046" +
    "\uffae\047\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\001\002\000\010\017\uffab\021\245\022\uffab\001" +
    "\002\000\006\017\uffac\022\uffac\001\002\000\070\002\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\014" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\001\002\000\070\002\uffc8\004\uffc8\005\uffc8\006\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\020\uffc8\021\uffc8" +
    "\024\224\025\225\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\001\002\000\064\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\011\uffca\012\uffca\014\uffca" +
    "\016\uffca\020\uffca\021\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\001\002\000\032\007" +
    "\076\013\100\031\112\036\072\046\115\047\117\052\075" +
    "\053\105\054\070\055\107\056\113\057\010\001\002\000" +
    "\012\002\ufff9\004\ufff9\005\ufff9\006\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\002\004\004\005\005\003\001\001\000" +
    "\006\006\060\007\055\001\001\000\002\001\001\000\010" +
    "\003\052\004\051\005\003\001\001\000\010\010\012\011" +
    "\011\041\010\001\001\000\004\053\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\017\013\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\024\040\025\041\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\030\040\032\041\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\004\043\037\001\001\000\002\001\001\000" +
    "\010\010\042\040\041\041\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\044\040\032\041\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\050\001\001\000\002\001\001\000\010\003" +
    "\053\004\051\005\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\062\007\055\042\061" +
    "\001\001\000\002\001\001\000\010\006\062\007\055\042" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\014\105\015\072\017\102\021\076\022\103\023\100\024" +
    "\107\025\066\027\070\030\101\032\073\033\110\034\115" +
    "\041\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\200\015" +
    "\072\017\102\021\076\022\103\023\100\024\107\025\066" +
    "\027\070\030\101\032\073\033\110\034\115\041\113\001" +
    "\001\000\006\020\175\056\173\001\001\000\036\014\164" +
    "\015\072\017\102\021\076\022\103\023\100\024\107\025" +
    "\066\027\070\030\101\032\073\033\110\034\115\041\113" +
    "\001\001\000\004\046\156\001\001\000\002\001\001\000" +
    "\006\016\145\044\150\001\001\000\004\045\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\025\135\027\070\030\101\032\073\033\110\034\115" +
    "\041\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\120\041" +
    "\113\001\001\000\002\001\001\000\004\060\133\001\001" +
    "\000\002\001\001\000\040\014\125\015\072\017\102\021" +
    "\076\022\103\023\100\024\107\025\066\027\070\030\101" +
    "\032\073\033\110\034\115\036\124\041\113\001\001\000" +
    "\002\001\001\000\004\052\127\001\001\000\036\014\130" +
    "\015\072\017\102\021\076\022\103\023\100\024\107\025" +
    "\066\027\070\030\101\032\073\033\110\034\115\041\113" +
    "\001\001\000\002\001\001\000\004\052\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\143\023\100\024\107\025\066\027\070\030\101" +
    "\032\073\033\110\034\115\041\113\001\001\000\026\022" +
    "\141\023\100\024\107\025\066\027\070\030\101\032\073" +
    "\033\110\034\115\041\113\001\001\000\004\045\142\001" +
    "\001\000\002\001\001\000\004\045\144\001\001\000\002" +
    "\001\001\000\032\017\153\021\076\022\103\023\100\024" +
    "\107\025\066\027\070\030\101\032\073\033\110\034\115" +
    "\041\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\145\044\154\001\001\000\002\001\001\000\024\023" +
    "\162\024\107\025\066\027\070\030\101\032\073\033\110" +
    "\034\115\041\113\001\001\000\002\001\001\000\024\023" +
    "\160\024\107\025\066\027\070\030\101\032\073\033\110" +
    "\034\115\041\113\001\001\000\004\046\161\001\001\000" +
    "\002\001\001\000\004\046\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\021" +
    "\176\022\103\023\100\024\107\025\066\027\070\030\101" +
    "\032\073\033\110\034\115\041\113\001\001\000\006\020" +
    "\175\056\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\202\015\072\017\102\021\076\022\103\023" +
    "\100\024\107\025\066\027\070\030\101\032\073\033\110" +
    "\034\115\041\113\001\001\000\002\001\001\000\036\014" +
    "\204\015\072\017\102\021\076\022\103\023\100\024\107" +
    "\025\066\027\070\030\101\032\073\033\110\034\115\041" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\210\015\072\017\102\021\076\022\103\023\100\024" +
    "\107\025\066\027\070\030\101\031\211\032\073\033\110" +
    "\034\115\041\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\216" +
    "\015\072\017\102\021\076\022\103\023\100\024\107\025" +
    "\066\027\070\030\101\032\073\033\110\034\115\041\113" +
    "\001\001\000\036\014\215\015\072\017\102\021\076\022" +
    "\103\023\100\024\107\025\066\027\070\030\101\032\073" +
    "\033\110\034\115\041\113\001\001\000\002\001\001\000" +
    "\004\047\220\001\001\000\036\014\221\015\072\017\102" +
    "\021\076\022\103\023\100\024\107\025\066\027\070\030" +
    "\101\032\073\033\110\034\115\041\113\001\001\000\002" +
    "\001\001\000\004\047\222\001\001\000\002\001\001\000" +
    "\006\034\254\041\113\001\001\000\006\041\226\054\227" +
    "\001\001\000\002\001\001\000\004\061\231\001\001\000" +
    "\004\026\230\001\001\000\002\001\001\000\004\055\232" +
    "\001\001\000\002\001\001\000\040\014\236\015\072\017" +
    "\102\021\076\022\103\023\100\024\107\025\066\027\070" +
    "\030\101\032\073\033\110\034\115\041\113\050\237\001" +
    "\001\000\002\001\001\000\006\051\245\053\045\001\001" +
    "\000\002\001\001\000\036\014\241\015\072\017\102\021" +
    "\076\022\103\023\100\024\107\025\066\027\070\030\101" +
    "\032\073\033\110\034\115\041\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\250\040" +
    "\032\041\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\253\001\001\000\002\001" +
    "\001\000\004\057\255\001\001\000\004\026\256\001\001" +
    "\000\002\001\001\000\036\014\260\015\072\017\102\021" +
    "\076\022\103\023\100\024\107\025\066\027\070\030\101" +
    "\032\073\033\110\034\115\041\113\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserOCL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserOCL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserOCL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public List<String> log = new ArrayList<String>();
	public List<String> errorLog = new ArrayList<String>();
	public SemanticAnalyzer as = new SemanticAnalyzer();
	
	public Symbol getCurrentToken() {
		return cur_token;
	}
	
	/* Overrides */
	@Override
	public void debug_message(String message) {
		if (message.equals("# Initializing parser"))
			message = "Inicializando o parser";
		if (message.contains("# Goto state #"))
			message = message.replace("# Goto state ", "# Goto para o estado ");
		if (message.contains("# Current Symbol is #")){
			message = message.replace("# Current Symbol is ", "O simbolo atual eh ");
			int tokenNumber = Integer.valueOf((String) message.subSequence(message.indexOf("#")+1, message.length()));
			message = message.replace(message.subSequence(message.indexOf("#"), message.length()), 
					Tokens.getTokenName(tokenNumber));
		}
		if (message.contains("# Current token is #")){
			message = message.replace("# Current token is ", "O token atual eh ");
			int tokenNumber = Integer.valueOf((String) message.subSequence(message.indexOf("#")+1, message.length()));
			message = message.replace(message.subSequence(message.indexOf("#"), message.length()), 
					Tokens.getTokenName(tokenNumber));
		}
		if (message.contains(" Attempting error recovery"))
			message = "\nRotina de tratamento de erros: tentando reparar o erro";
		if (message.contains("Error recovery fails"))
			message = "Recuperacao de erro falhou";
		if (message.contains("Finding recovery state") | message.contains("Pop stack by one") | message.contains("No recovery state"))
			return;
		log.add(message + "\n");
	}
	
	@Override
  	public void debug_reduce(int prod_num, int nt_num, int rhs_size) {
		debug_message("# Reduce com a producao #" + prod_num + " [NT=" + nt_num
				+ ", " + "SZ=" + rhs_size + "]");
	}

	@Override
	public void debug_shift(Symbol shift_tkn) {
		debug_message("# Shift sob o termo " + Tokens.getTokenName(shift_tkn.sym) + " para o estado #"
				+ shift_tkn.parse_state);
	}
	
	@Override
	public void report_error(String message, Object info) {
		String token = "";
		if (info instanceof Symbol){
			Symbol s = (Symbol) info;
			if (s.value != null){
				token = s.value.toString();
			} 
			else {
				token = Tokens.getTokenName(s.sym);
			}
			errorLog.add(message + ": token \" " + token + " \"" + " na linha " + (s.left+1));
		}
		else
			errorLog.add(message);
	}
	
	@Override
	public void report_fatal_error(String message, Object info) throws excecoes.FatalErrorException {
		report_error(message, info);
		done_parsing();
		String linha = "";
		if (info instanceof Symbol){
			Symbol s = (Symbol) info;
			linha = " na linha " + (s.left+1);
		}
		throw new excecoes.FatalErrorException("na analise sintatica" + linha);
	}
	
	@Override
	public void syntax_error(Symbol cur_token) {
		report_error("Erro sintatico", cur_token);
	}
	
	@Override
	public void unrecovered_syntax_error(Symbol cur_token) throws excecoes.FatalErrorException {
		String token = " na linha " + (cur_token.left+1);
		if (cur_token.value != null)
			token = ": token " + cur_token.value + token;
		throw new excecoes.FatalErrorException("na analise sintatica" + token + ". Impossivel reparar e continuar a analise.");
    }
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserOCL$actions {
  private final ParserOCL parser;

  /** Constructor */
  CUP$ParserOCL$actions(ParserOCL parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserOCL$do_action(
    int                        CUP$ParserOCL$act_num,
    java_cup.runtime.lr_parser CUP$ParserOCL$parser,
    java.util.Stack            CUP$ParserOCL$stack,
    int                        CUP$ParserOCL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserOCL$result;

      /* select the action based on the action number */
      switch (CUP$ParserOCL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // litteral ::= BOOL 
            {
              Object RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Boolean bool1 = (Boolean)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node(bool1, "Boolean");  node.setCode("" + bool1); RESULT = node;
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("litteral",24, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // litteral ::= STRING 
            {
              Object RESULT =null;
		int string1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int string1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		String string1 = (String)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node(string1, "String"); node.setCode("\"" + string1 + "\""); RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("litteral",24, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // litteral ::= FLOAT 
            {
              Object RESULT =null;
		int float1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int float1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Float float1 = (Float)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node(float1, "Float"); node.setCode("" + float1); RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("litteral",24, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // litteral ::= INT 
            {
              Object RESULT =null;
		int int1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Integer int1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node(int1, "Integer"); node.setCode("" + int1); RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("litteral",24, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // pathNameAux ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("") ; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("pathNameAux",41, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // pathNameAux ::= FOUR_POINTS ID pathNameAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int pnaleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int pnaright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object pna = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = new Node("::" + (String)id + ((Node)pna).toString()); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("pathNameAux",41, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // pathName ::= ID pathNameAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int pnaleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int pnaright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object pna = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = new Node((String)id + ((Node)pna).toString()); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("pathName",31, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // oclType ::= OCL_COLLECTION LPAREN typeName RPAREN 
            {
              Object RESULT =null;
		int collection1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).left;
		int collection1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).right;
		String collection1 = (String)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = new Node(((Node)tn).getType(),((Node)tn).getType());
		 														   node.setCollection(true);
		 														   RESULT = node;
		 														 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("oclType",30, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // oclType ::= OCL_BASIC_TYPE 
            {
              Object RESULT =null;
		int basic1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int basic1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		String basic1 = (String)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = new Node(basic1, basic1); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("oclType",30, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // oclType ::= OCL_SUPER_TYPE 
            {
              Object RESULT =null;
		int super1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int super1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		String super1 = (String)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = new Node(super1, super1); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("oclType",30, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // typeName ::= oclType 
            {
              Object RESULT =null;
		int ocltype1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int ocltype1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object ocltype1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = ocltype1; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("typeName",29, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // typeName ::= pathName 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 RESULT = pn; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("typeName",29, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actualParameterListAux ::= 
            {
              Object RESULT =null;
		 RESULT = new Node(); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("actualParameterListAux",40, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actualParameterListAux ::= COMA expression actualParameterListAux 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int apla1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int apla1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object apla1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node();
						   node.addAllElements(((Node)apla1).getElements());
						   node.addElement((Node)exp1);
						   node.setCode(", " + ((Node)exp1).getCode() + ((Node)apla1).getCode());
						   RESULT = node;
						
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("actualParameterListAux",40, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actualParameterList ::= 
            {
              Object RESULT =null;
		 RESULT = new Node(); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("actualParameterList",28, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actualParameterList ::= expression actualParameterListAux 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int apla1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int apla1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object apla1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = new Node();
						   node.addAllElements(((Node)apla1).getElements());
						   node.addElement((Node)exp1);
						   node.setCode(((Node)exp1).getCode() + ((Node)apla1).getCode());
						   RESULT = node;
						
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("actualParameterList",28, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaratorAux ::= 
            {
              Object RESULT =null;
		 RESULT = new Node(); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("declaratorAux",39, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaratorAux ::= COMA ID declaratorAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int da1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int da1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object da1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 Node node = (Node)da1;
												  node.addElement(new Node((String)id));
												  RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("declaratorAux",39, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declarator ::= ID declaratorAux PIPE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).value;
		int da1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int da1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object da1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = (Node)da1;
												  node.addElement(new Node((String)id));
												  RESULT = node;
												  parser.as.setDeclaratorAux(node.getElements());
												  parser.as.setDeclarator(true); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("declarator",38, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarator ::= ID declaratorAux POINTS typeName PIPE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-4)).value;
		int da1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).left;
		int da1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).right;
		Object da1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = (Node)da1;
												  				  node.addElement(new Node((String)id));
												  				  RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("declarator",38, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameters ::= LPAREN actualParameterList RPAREN 
            {
              Object RESULT =null;
		int apl1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int apl1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object apl1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = (Node)apl1; node.setCode("(" + ((Node)apl1).getCode() + ")"); RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("parameters",27, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // collectionParameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 Node node = new Node();
				                   node.setType("void");
				                   node.setCode("()");
				                   RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("collectionParameters",43, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // collectionParameters ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = new Node();
				                   				   node.setType(((Node)exp1).getType());
				                   				   node.setCode("(#N#" + ((Node)exp1).getCode() + ")");
				                   				   RESULT = node; 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("collectionParameters",43, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // collectionParameters ::= LPAREN declarator RPAREN 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 RESULT = new Node(null, "void");
											  
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("collectionParameters",43, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // collectionParameters ::= LPAREN declarator expression RPAREN 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		 Node node = new Node();
				                   				   						node.setType(((Node)exp1).getType());
				                   				   						node.setCode("(#D#" + ((Node)d1).getCode() + ((Node)exp1).getCode() + ")");
				                   				   						RESULT = node;
				                   				   						parser.as.setDeclarator(false); 
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("collectionParameters",43, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // featureCallCollection ::= pathName NT$2 collectionParameters 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-1)).value;
		int pnleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$ParserOCL$stack.peek()).value;
		 
                      parser.as.checkCollectionOperation(((Node)pn).toString(), ((Node)params).getType(), pnleft);
                      Node node = new Node(((Node)pn).toString());
                      node.setCode(((Node)pn).toString() + ((Node)params).getCode());
                      RESULT = node;
                      parser.as.opCollection = false;
                      
              CUP$ParserOCL$result = parser.getSymbolFactory().newSymbol("featureCallCollection",42, ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.elementAt(CUP$ParserOCL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()), RESULT);
            }
          return CUP$ParserOCL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$2 ::= 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$ParserOCL$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$ParserOCL$s
