// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a014 += a017;
a002 += a019;
cur -= a005;
a008 = a008 + a005;
a006 -= a015;
a009 -= a004;
a003 += a007;
a003 = a017 + a003;
a020 = a018 + a022;
a014 = a004 * 1;
if (a015 > a009) {
a005 = a021 - a003;
a018 += a014;
cur = a012 + a018;
a016 -= a016;
a010 = a006 - a016;
a003 += a016;
a002 += a022;
a016 += a009;
a012 -= a002;
a008 = a012 + a005;
a014 += a021;
a002 = a008 - a012;
a007 += a013;
a014 += a001;
a013 = a009 - a007;
a000 -= a004;
a014 = a005 + a003;
a016 = a001 + a021;
a022 = a004 + a017;
a005 = a006 - a002;
a014 += a017;
a024 -= a004;
if (a010 > a009) {
a024 += 1;
a005 -= a013;
a016 = a007 - a001;
a012 = a005 - a007;
a000 = cur + a014;
a005 = a000 + a022;
a015 = a003 - a004;
a024 = cur + a023;
} else {
a019 = a014 - a021;
a018 -= a019;
a010 = a008 + a023;
a013 += a017;
a000 = a004 - a007;
a012 = a010 - a015;
a002 = a009 - a012;
a009 += a019;
a006 = a024 + a021;
a012 += a017;
a013 = a008 - a008;
a017 = a019 + a020;
a013 -= a011;
a010 = a012 + a017;
a023 = a007 - 4;
a021 = a015 - a015;
a002 = a012 + a018;
a005 -= a016;
a018 = a019 + a011;
a014 += a003;
cur -= a002;
a023 += cur;
cur = a018 + -3;
a013 = a004 - a014;
cur -= a024;
cur -= a011;
}
a019 += -1;
if (a022 < a011) {
a021 = a024 + 4;
a019 += a018;
a022 -= a013;
a007 += cur;
a016 = a010 - a010;
a015 -= a022;
a014 = a018 - a004;
a023 = a002 + a016;
a013 = a019 - a001;
a009 -= a015;
a019 = -3 + a013;
a006 = a022 - a015;
a010 = a000 + a020;
a002 += a019;
a006 = a003 - a024;
a014 = a011 + a007;
a024 = a012 + a015;
a009 += a014;
a009 += a000;
a018 += a009;
a022 += a011;
a004 = a012 + a016;
a023 = a017 + a001;
a010 = a007 + a011;
a019 += a004;
a015 += a008;
a011 = a010 + a014;
a006 += a016;
a023 = a001 + cur;
if (cur != a005) {
a018 = a007 + a004;
a019 += a010;
a024 = a007 + a015;
a010 += a006;
a014 += a010;
} else {
a009 = a016 - a019;
a002 = a022 + a013;
a020 = a001 - a008;
a014 = a002 - a023;
a003 += a000;
a006 += a019;
cur += a022;
a001 = a011 - a011;
a008 = a004 - a002;
a006 += a000;
a009 += a022;
a011 = a001 - a011;
a024 = 4 + a008;
a004 = a013 - a022;
a015 = a006 - cur;
a007 += a019;
a015 = a021 + a002;
a010 = a002 - a017;
a009 += a010;
a022 -= a000;
a012 += a004;
a023 += a020;
if (a010 > a018) {
a019 += a013;
a016 += a007;
a007 += a009;
a015 = a017 - a015;
a001 = a016 + a016;
a024 = a011 - a016;
a022 += a020;
a016 -= a008;
a009 += -1;
cur = a022 + a004;
a014 = a022 - 2;
a004 = a000 + a007;
a002 = a011 - a021;
a006 = a019 + a014;
a015 = a022 + a001;
a011 -= a000;
a001 += a000;
a010 += a003;
a024 -= a006;
a019 += a010;
a001 += a022;
a018 = a016 + a003;
a024 = a012 - a020;
a002 -= a005;
} else {
a008 -= a007;
a007 = cur - a000;
a021 = a017 + a004;
a014 -= a011;
a012 -= a019;
a020 = a011 + a000;
a009 -= a008;
a001 -= cur;
a004 = a018 + a002;
a008 -= a009;
}
a020 = a011 - a003;
a024 = a001 + a006;
a017 -= a005;
a019 = a019 - a023;
a022 -= a011;
a001 -= a005;
a009 += a007;
a011 -= a001;
a020 = a005 - a023;
a011 = a020 * -4;
a012 = a020 + a005;
a021 += a012;
a015 += a003;
a023 = a015 - a024;
a004 += a015;
}
a022 = 0 + a018;
a019 -= cur;
a019 = a015 + a008;
a005 = a020 - a019;
a002 -= a008;
a016 -= a012;
a021 = a023 + a011;
a000 -= a005;
a012 = a003 - a022;
} else {
a015 += a012;
a021 = a012 + a003;
a024 -= 0;
a006 += a013;
a012 += a001;
a017 -= a013;
a002 += a002;
a019 += a003;
a011 = a020 + a022;
a011 = a021 - -1;
a008 = a006 + a009;
a021 = a004 - cur;
a018 = cur + a010;
cur -= a006;
a001 = a008 - a014;
a004 = a003 + a024;
a014 = a010 - a022;
a011 -= a016;
a000 = a014 * 3;
a024 -= a001;
}
a020 += a001;
a023 = 4 - a011;
a019 -= a015;
cur += a012;
a016 += -5;
a003 = a000 + a018;
a012 -= a023;
a017 = a017 + a004;
a007 = a014 + a024;
a003 -= a022;
a000 += a015;
a018 += a015;
a005 = a009 + a010;
a020 = a024 - a019;
a014 -= a023;
a009 = a001 + a001;
a007 = a006 + a020;
a015 -= a007;
a015 = a024 - a003;
a004 = a001 + a016;
a012 += a013;
a006 = a023 - a011;
a014 += a009;
a020 -= cur;
} else {
a024 += a014;
a017 -= a024;
a001 = a018 - 0;
a013 = a003 + a023;
a004 += a013;
a018 = a015 - a011;
a013 -= a013;
a003 += a021;
a014 -= a007;
a012 = a002 - a009;
a007 += a009;
a016 = a005 - a019;
a023 = a022 * 0;
a005 = a022 + a020;
a021 += a006;
a006 = a021 - a016;
a009 += a012;
cur = a013 - a024;
a017 += a014;
a003 = a010 + a005;
a018 = cur - a012;
a010 = a010 + a010;
}
a001 -= cur;
a007 += a023;
a012 -= a004;
}
output.collect(prefix, new IntWritable(a009));
}
