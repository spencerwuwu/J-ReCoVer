// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 4

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a001 = a008 + a013;
a001 = a007 - a006;
a003 += a004;
a009 = a013 + a005;
a006 = a008 - a012;
a001 -= a004;
a010 = a000 + a017;
a001 = a001 + a019;
a002 -= a017;
a006 -= a007;
a012 += a006;
a017 -= a019;
if (a007 >= a010) {
a001 = a013 + a004;
a004 += a009;
a013 += 2;
a018 += a013;
} else {
cur += a010;
a008 -= a012;
a009 = a008 + a009;
a016 -= a010;
a006 = a002 + a001;
a004 -= a007;
a007 = 1 - a012;
a001 += a007;
a003 = a017 + a019;
a009 += a002;
a008 += a010;
a011 -= a005;
a009 -= 2;
a014 = a006 + a011;
a006 = a008 - a016;
a013 = a004 - a009;
a008 = a004 - 4;
a008 += a006;
a014 += a018;
a011 += a013;
a017 = cur + a006;
a002 = a017 + a007;
a016 = a000 + a002;
a006 += a001;
a003 -= a001;
a000 += a008;
if (a008 >= a006) {
a014 = a004 - a019;
a007 = a016 + a008;
a009 += a000;
a016 = a006 + a006;
if (a019 <= a010) {
a011 = a004 + a005;
a001 += a010;
a009 -= a001;
a000 -= a003;
a001 -= a006;
a000 += a010;
a019 += a017;
a013 -= a016;
a014 -= a007;
a011 -= a018;
a019 -= a012;
a018 = a007 + a010;
a006 = a013 + -1;
cur = a018 + a005;
a019 = cur - a001;
a007 -= 0;
a002 += a011;
if (a000 <= cur) {
a006 -= a014;
} else {
a002 = a006 + 4;
a000 += a000;
a009 += a009;
a018 = a019 - a012;
a005 += a018;
a004 = a019 + a006;
a017 -= a007;
a014 = a018 - a004;
a017 = a007 + a000;
a011 += a000;
a013 -= a006;
a017 = a001 - a002;
a006 = a001 - a004;
a010 = a018 - a019;
a016 -= a006;
a011 = a000 - a006;
}
a004 = a011 + a007;
a004 += a003;
a013 += a015;
a018 = cur + -5;
a015 -= a005;
a018 = a010 - a011;
cur -= a015;
a018 = a002 - a019;
} else {
a015 = a014 - a002;
a004 = a002 - cur;
a004 += 4;
a014 -= a003;
a005 = a012 + a019;
a009 = a005 + a004;
a018 -= a004;
a019 = a001 + a019;
a015 = a015 - 0;
a015 = a017 - a013;
a005 = a014 + a018;
a009 = a008 + a005;
a011 = a002 + a003;
a000 = a003 - a010;
a003 -= a000;
a001 = a014 + a004;
}
a011 -= a012;
a003 += a000;
a002 = a017 + a007;
a013 -= a006;
a011 = a007 + a009;
a008 += a019;
a000 -= a002;
a012 = 2 - a010;
cur = a006 - a014;
a013 = a001 - a000;
a002 += a004;
a000 -= a014;
a000 -= a005;
a016 -= a009;
a000 += a009;
a001 += a012;
} else {
a010 += a002;
a001 += a007;
a018 += a008;
a010 = a014 * 4;
a007 += a011;
a005 = a011 + a007;
a018 += a002;
cur -= 4;
a014 += a003;
a000 = a018 + a002;
a009 = a019 - a013;
a008 = a012 + a001;
a015 = a001 + a017;
a001 -= a014;
a010 -= a007;
a012 -= a015;
a013 = a000 - a007;
a015 += a013;
a002 -= cur;
a015 = a017 - a011;
a002 -= a017;
a005 = a017 + 4;
a003 = a018 + a001;
a002 = a007 + a017;
}
a006 -= a000;
a000 -= cur;
a009 += a006;
a003 -= a013;
a004 = a009 - a006;
a011 += a019;
a012 -= a005;
a011 += a010;
cur = a010 + a001;
cur -= a003;
a016 += a010;
a013 = a013 - cur;
a014 -= a016;
a017 += a005;
a014 += a008;
a014 += a015;
a000 += a012;
a007 -= a019;
a014 = a000 - cur;
}
a006 += a010;
a008 = a018 + a007;
a006 = a016 + a014;
a008 = a004 + a001;
a011 += a015;
a017 = a018 + a000;
a013 = a007 + a012;
a013 -= a016;
a004 -= a000;
a003 = a013 + a004;
a004 = a011 + a014;
a002 = a006 + a014;
a012 = a010 + a014;
a009 += a000;
a012 = a008 + a013;
a017 += a006;
a002 = a011 + a005;
a017 = a018 + a000;
a012 = a000 + cur;
a017 = a003 * 1;
a003 += a015;
a009 -= a004;
a019 -= a003;
a016 -= a000;
cur += a018;
a016 += 4;
cur += a005;
a000 -= a001;
a015 -= a014;
a003 = a010 - a010;
a018 -= a003;
a010 += a016;
a007 += a017;
a016 += a001;
a017 = a007 + a003;
a009 += a001;
a010 += a016;
}
output.collect(prefix, new IntWritable(a000));
}
