// https://searchcode.com/api/result/12261438/


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 19 21:29:25 CET 2011
//----------------------------------------------------

package compiladorcyclone;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 19 21:29:25 CET 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\005" +
    "\007\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\010\006\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\012" +
    "\007\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\014\003\000\002\014\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\016\004\000\002\016\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\074\012\030\013\044\014\050\015\051\016" +
    "\014\017\016\020\010\022\040\023\041\024\043\025\046" +
    "\026\045\027\042\030\024\031\004\032\015\033\012\034" +
    "\026\035\047\036\036\037\011\040\021\041\017\042\005" +
    "\043\025\044\037\045\032\046\023\047\020\001\002\000" +
    "\004\004\133\001\002\000\076\002\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\001\002\000\076\002\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\001\002\000\004\002\132\001\002\000\004\004\053" +
    "\001\002\000\004\006\057\001\002\000\004\004\125\001" +
    "\002\000\076\002\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\001\002" +
    "\000\004\004\053\001\002\000\004\004\121\001\002\000" +
    "\004\004\053\001\002\000\004\005\117\001\002\000\076" +
    "\002\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002\000\004\005" +
    "\116\001\002\000\076\002\uffff\012\030\013\044\014\050" +
    "\015\051\016\014\017\016\020\010\022\040\023\041\024" +
    "\043\025\046\026\045\027\042\030\024\031\004\032\015" +
    "\033\012\034\026\035\047\036\036\037\011\040\021\041" +
    "\017\042\005\043\025\044\037\045\032\046\023\047\020" +
    "\001\002\000\076\002\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\001" +
    "\002\000\004\004\111\001\002\000\076\002\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\001\002\000\004\006\057\001\002\000" +
    "\076\002\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\001\002\000\004" +
    "\004\053\001\002\000\076\002\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\001\002\000\076\002\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\001\002\000\076\002\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001" +
    "\002\000\076\002\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002" +
    "\000\076\002\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\001\002\000" +
    "\004\006\057\001\002\000\076\002\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\001\002\000\004\004\072\001\002\000\004\004" +
    "\072\001\002\000\004\004\072\001\002\000\004\004\072" +
    "\001\002\000\004\004\053\001\002\000\004\004\072\001" +
    "\002\000\004\004\072\001\002\000\004\006\057\001\002" +
    "\000\004\004\053\001\002\000\004\004\053\001\002\000" +
    "\076\002\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002\000\004" +
    "\021\054\001\002\000\004\004\055\001\002\000\004\021" +
    "\056\001\002\000\010\004\060\005\063\006\057\001\002" +
    "\000\100\002\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\001" +
    "\002\000\076\002\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002" +
    "\000\076\002\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\001\002\000" +
    "\100\002\ufff0\010\065\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002" +
    "\000\076\002\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001\002\000" +
    "\076\002\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\001\002\000\004" +
    "\004\066\001\002\000\004\011\067\001\002\000\076\002" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\001\002\000\076\002\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\001\002\000\076\002\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\001\002\000\004\021\074\001\002" +
    "\000\076\002\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001\002\000" +
    "\004\004\075\001\002\000\004\021\076\001\002\000\004" +
    "\006\077\001\002\000\076\002\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\001\002\000\076\002\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\001\002\000\076\002\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\001" +
    "\002\000\076\002\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002" +
    "\000\076\002\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\001\002\000" +
    "\076\002\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\001\002\000\076" +
    "\002\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002\000\076\002" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\001\002\000\076\002\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\001\002\000\076\002\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\001\002\000\004\021\112\001\002" +
    "\000\004\006\057\001\002\000\004\010\065\001\002\000" +
    "\076\002\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\001\002\000\004" +
    "\002\001\001\002\000\076\002\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\001\002\000\076\002\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\001\002\000\076\002\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001" +
    "\002\000\004\021\122\001\002\000\004\006\057\001\002" +
    "\000\076\002\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000" +
    "\076\002\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002\000\004" +
    "\021\126\001\002\000\004\006\057\001\002\000\076\002" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\076\002\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\001\002\000\076\002\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\001\002\000\004\002\000\001\002" +
    "\000\004\021\134\001\002\000\004\006\057\001\002\000" +
    "\076\002\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\024\002\006\003\021\004\012\011\030\013" +
    "\026\014\032\015\033\016\005\017\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\130\001\001\000\004\007\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\123\001" +
    "\001\000\002\001\001\000\004\005\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\114\003\021\004\012\011\030\013\026\014\032\015\033" +
    "\016\005\017\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\107\001\001\000\002" +
    "\001\001\000\004\005\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\105\001\001\000\002\001\001\000" +
    "\004\012\104\001\001\000\004\012\103\001\001\000\004" +
    "\012\102\001\001\000\004\012\101\001\001\000\004\005" +
    "\100\001\001\000\004\012\077\001\001\000\004\012\072" +
    "\001\001\000\004\007\070\001\001\000\004\005\067\001" +
    "\001\000\004\005\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\060\007\061\010\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\112\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\112\010" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\112\010\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\112\010\134\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}








    public void report_fatal_error(String message, Object info) {
        report_error(message, info);

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    static final int DIR_INM = 0;
    static final int DIR_REL = 1;
    static final int DIR_REG = 2;
    static final int DIR_HEX = 3;

    int flag_direccionamiento;
    //Implementar variables repetidas.

    fichero fich = new fichero("./src/extras/instruccBinario.txt");

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion_miscelanea ::= STDBY 
            {
              String RESULT =null;
		
                                String opCode = "101";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion_miscelanea ::= WAIT 
            {
              String RESULT =null;
		
                                String opCode = "100";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion_miscelanea ::= DISI 
            {
              String RESULT =null;
		
                                String opCode = "011";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion_miscelanea ::= ENI 
            {
              String RESULT =null;
		
                                String opCode = "010";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion_miscelanea ::= RETI 
            {
              String RESULT =null;
		
                                String opCode = "001";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion_miscelanea ::= RET 
            {
              String RESULT =null;
		
                                String opCode = "000";
                                RESULT = "1111" + "11" + opCode + "000000000";
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_miscelanea",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion_salto_incondicional ::= CALL hexadecimal 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String hex = funciones.hexadABinarioNBits(h, 10);
                                String opCode = "01";
                                RESULT = "1111" + "10" + opCode + hex;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_incondicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion_salto_incondicional ::= JMP hexadecimal 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String hex = funciones.hexadABinarioNBits(h, 10);
                                String opCode = "00";
                                RESULT = "1111" + "10" + opCode + hex;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_incondicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion_salto_condicional ::= BNC direccionamiento_inmediato 
            {
              String RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String di = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String opCode = "11";
                                RESULT = "1111" + "00" + opCode + "00" + di;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion_salto_condicional ::= BC direccionamiento_inmediato 
            {
              String RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String di = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String opCode = "10";
                                RESULT = "1111" + "00" + opCode + "00" + di;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion_salto_condicional ::= BNZ direccionamiento_inmediato 
            {
              String RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String di = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String opCode = "01";
                                RESULT = "1111" + "00" + opCode + "00" + di;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion_salto_condicional ::= BZ direccionamiento_inmediato 
            {
              String RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String di = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String opCode = "00";
                                RESULT = "1111" + "00" + opCode + "00" + di;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto_condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion_salto ::= instruccion_salto_incondicional 
            {
              String RESULT =null;
		int isileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String isi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = isi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion_salto ::= instruccion_salto_condicional 
            {
              String RESULT =null;
		int iscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String isc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = isc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_salto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion_memoria ::= OUT registro COMA direccionamiento_relativo 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String r1 = funciones.registroToString(reg1);
                                String opCode = "011";
                                RESULT = "1" + opCode + r1 + dr;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_memoria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_memoria ::= IN registro COMA direccionamiento_relativo 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String r1 = funciones.registroToString(reg1);
                                String opCode = "010";
                                RESULT = "1" + opCode + r1 + dr;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_memoria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion_memoria ::= ST registro COMA direccionamiento_relativo 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String r1 = funciones.registroToString(reg1);
                                String opCode = "001";
                                RESULT = "1" + opCode + r1 + dr;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_memoria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_memoria ::= LD registro COMA direccionamiento_relativo 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String r1 = funciones.registroToString(reg1);
                                String opCode = "000";
                                RESULT = "1" + opCode + r1 + dr;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_memoria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // resto_desplazamiento ::= registro COMA registro COMA numero 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int reg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String count = funciones.numeroABinarioNBits(Integer.valueOf(num),3);
                                String r1 = funciones.registroToString(reg1);
                                String r2 = funciones.registroToString(reg2);
                                RESULT = r1 + r2 + count;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_desplazamiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_desplazamiento ::= ROR resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "101";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_desplazamiento ::= ROL resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "100";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion_desplazamiento ::= SRA resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "011";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_desplazamiento ::= SLA resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "010";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion_desplazamiento ::= SRL resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "001";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion_desplazamiento ::= SLL resto_desplazamiento 
            {
              String RESULT =null;
		int resDespleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDespright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resDesp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String ext = "000";
                                RESULT = "1" + "100" + resDesp + "00" + ext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_desplazamiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direccionamiento_relativo ::= direccionamiento_inmediato PARI registro PARD 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                String numReg = funciones.registroToString(reg);
                                RESULT = numReg + num;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento_relativo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // direccionamiento_inmediato ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //System.out.println("se ha reducido direccionamiento_inmediato:"+ num);
    String dir_inmediato = funciones.funcion_reducir_inmediato(num);
    RESULT = dir_inmediato;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento_inmediato",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // direccionamiento ::= hexadecimal 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funciones.hexadABinarioNBits(h, 8); flag_direccionamiento = DIR_HEX; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // direccionamiento ::= direccionamiento_relativo 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r; flag_direccionamiento = DIR_REL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // direccionamiento ::= direccionamiento_inmediato 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d; flag_direccionamiento = DIR_INM; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // direccionamiento ::= registro 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funciones.registroToString(reg); flag_direccionamiento = DIR_REG; /*System.out.println("Registro direcc");*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direccionamiento",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // resto_alu ::= registro COMA registro COMA direccionamiento 
            {
              String RESULT =null;
		int reg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int reg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reg2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
/*    System.out.println(" reconoce resto alu");*/
    String r1 = funciones.registroToString(reg1);
    String r2 = funciones.registroToString(reg2);
    String res_alu = funciones.funcion_resto_alu (r1,r2,dir);
    RESULT = res_alu;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_alu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion_alu ::= XOR resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String opCode = "110";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion_alu ::= OR resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String opCode = "101";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_alu ::= AND resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String opCode = "100";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_alu ::= SUBC resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String opCode = "011";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion_alu ::= SUB resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String opCode = "010";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion_alu ::= ADDC resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String opCode = "001";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion_alu ::= ADD resto_alu 
            {
              String RESULT =null;
		int resAlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resAlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resAl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String opCode = "000";
                                         if(flag_direccionamiento == DIR_REG)
                                            RESULT = "1" + "110" + resAl +"00" + opCode;
                                         else
                                            RESULT = "0"+ opCode + resAl;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_alu",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= instruccion_miscelanea 
            {
              String RESULT =null;
		int imisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String imis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*Guardalo a fichero*/ System.out.println("Instruccion en binario:"+imis);
                                    fich.escribir(imis); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= instruccion_salto 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*Guardalo a fichero*/ System.out.println("Instruccion en binario:"+is);
                                    fich.escribir(is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= instruccion_memoria 
            {
              String RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*Guardalo a fichero*/ System.out.println("Instruccion en binario:"+im);
                                    fich.escribir(im); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= instruccion_desplazamiento 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id;
                                    /*Guardalo a fichero*/ System.out.println("Instruccion en binario:"+id);
                                    fich.escribir(id);
                                    /*System.out.println("reduce instruccion por intruccion_desp");*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion_alu 
            {
              String RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ia = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ia; 
                                    /*Guardalo a fichero*/ System.out.println("Instruccion en binario:"+ia);
                                    fich.escribir(ia);
                                    /*System.out.println("reduce instruccion por intruccion_alu");*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbo
