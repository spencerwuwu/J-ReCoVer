// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 4

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a013 = a002 + a005;
a000 += a009;
a001 = a012 - a008;
a016 += a009;
a001 -= a011;
a016 = cur - a010;
a018 = a001 - a017;
a011 += a015;
a008 = -5 - a002;
a004 = a010 + a018;
a006 = a001 - a014;
a016 = a012 - a010;
a005 -= a013;
cur -= a019;
a012 = a008 - 2;
a018 = a006 - a010;
a005 = cur + a010;
a019 -= a017;
a018 = a019 + 4;
a009 += a011;
a001 -= a007;
a016 += a019;
a009 = a010 + a005;
a004 += a011;
a011 -= a017;
a014 -= cur;
a006 += a013;
a000 = a009 - a017;
a016 += a007;
a017 -= a014;
a014 = a016 - a016;
a012 -= a019;
a003 = a007 + a001;
if (a007 > a008) {
a006 += a016;
a011 -= a003;
a013 = a003 - a001;
a001 -= a018;
a004 -= a012;
a005 = a014 + a007;
a000 = a014 - cur;
a015 += a001;
a011 = a003 + a003;
a010 = 1 + a012;
a005 += a017;
a017 += a012;
a006 -= -5;
a010 += a001;
a004 = a003 - a018;
a001 -= a010;
a013 -= a015;
a017 = a001 - a015;
} else {
a014 -= a011;
a016 += a014;
a014 = a005 - a000;
a004 -= a011;
a002 = a000 - a018;
a005 = a005 + a019;
}
a006 = a016 - a010;
a004 -= a012;
a008 = a000 + 4;
a004 -= a010;
a015 += a005;
a009 = a002 - a016;
a018 = a004 + a016;
a004 += a004;
a000 = a005 + a002;
a016 += a019;
a012 = a016 + a016;
a005 = a018 - a017;
a003 -= a000;
a010 = cur + a008;
if (a006 == a010) {
a007 = a006 + a004;
a013 = a010 + a013;
a003 = a016 + 3;
a010 -= a009;
a012 -= a016;
a000 += a001;
cur -= a005;
a019 = -5 - a019;
a012 = a004 + a003;
a012 = a003 + a009;
cur = a008 + a001;
a012 = a009 + a013;
a000 = a004 + a018;
a019 -= a018;
a014 = a019 + a009;
a006 = a000 - cur;
cur -= a009;
a000 = a002 + cur;
a003 = a019 - a000;
a015 += a012;
a009 += a001;
cur = a009 - a009;
a012 = a018 + a011;
cur = a017 + a005;
a006 = a007 - a007;
a016 -= a005;
a013 = a015 - a004;
if (a013 != a004) {
cur += a018;
cur += a003;
a002 -= a007;
a010 += a008;
a006 -= a007;
a013 = a003 + -4;
a004 = a010 + a005;
a016 = a013 - a007;
a003 -= a005;
a003 += a001;
a012 += a009;
a001 = a016 + a018;
a000 = a009 - a010;
a005 = a000 + a008;
a017 = a004 - a012;
a011 = a001 - a011;
a008 = a001 - a010;
a013 = a002 + a008;
a018 += a002;
a011 = a006 + a007;
a001 -= a014;
a002 += a003;
a003 = a005 + a018;
a004 = a015 - a016;
a017 = a016 + a009;
a010 = a015 - a004;
a016 = a002 - a013;
a014 -= a018;
a009 -= a009;
} else {
a005 = a013 - a001;
a006 -= a006;
a019 = a016 + a012;
a008 += a018;
a011 += a010;
a019 = a016 - a015;
if (a015 <= a004) {
a003 = a006 - a018;
a012 += a015;
a002 -= a003;
a016 -= a004;
a002 += a002;
a009 = a014 - a001;
a012 = a011 * -1;
a008 = a007 + a002;
a004 -= a013;
a013 += a002;
a002 += a004;
a013 = a016 + a018;
a010 = a000 - a014;
a003 = a007 - a014;
a002 = a006 + a012;
a018 = a000 - a016;
a002 -= cur;
a008 = a014 + a018;
a007 = a008 - a000;
a006 = a005 - a006;
a013 -= a004;
a010 = a017 + a001;
a016 = a012 - a017;
a007 = cur + a009;
a016 = a013 + a018;
a001 = a008 - a008;
} else {
a012 += -3;
a007 -= a008;
a016 -= a002;
a003 = cur - cur;
a017 = a012 - a011;
a000 -= a017;
a016 += a018;
a001 = a000 - a014;
a017 += a010;
a003 = a002 - a000;
a019 = a016 + a006;
a019 += a003;
a013 = a002 + a008;
a017 -= a014;
a014 = a007 - a013;
a005 = a004 - a008;
a012 = a002 + a005;
a014 -= a016;
a011 += a005;
a000 -= a008;
a010 -= a006;
a013 = a010 - a012;
a003 = a006 + a006;
a007 = a017 + a016;
a000 = a008 - a010;
a003 -= a010;
a009 += cur;
a000 = a007 + a006;
a000 += a001;
a002 = a002 - a019;
}
}
a013 = a014 - a004;
a000 += a015;
a003 += a011;
a016 = a016 - a005;
a010 = a016 + cur;
a018 -= a002;
a012 += a011;
a015 += a014;
a018 = a003 - a018;
a005 = cur + a012;
} else {
}
a001 += a005;
}
output.collect(prefix, new IntWritable(a004));
}
