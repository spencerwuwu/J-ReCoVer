// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a003 = a002 + a016;
if (a000 < a002) {
a000 += a002;
a017 = a014 - a014;
} else {
a004 += a000;
a014 += a008;
a019 -= -3;
a005 = a005 - a005;
a001 += 1;
a015 += a014;
if (a017 == a004) {
} else {
a014 = a006 - a003;
a005 -= cur;
}
a002 = a002 + -3;
a003 = a008 - a004;
a008 -= a005;
a002 -= a011;
a016 -= a016;
if (a019 > -4) {
a009 -= 0;
a014 -= a004;
a007 = a019 - a007;
a009 += a014;
a007 += a010;
cur = a011 + a004;
a001 -= cur;
} else {
a004 = a000 - a004;
a017 = a019 - cur;
a000 -= a000;
a016 += a007;
a004 -= a017;
a013 = a003 - a010;
a001 = a018 - a002;
}
a004 += a004;
cur = a014 + a012;
a008 = a014 + a011;
a004 = 0 - a012;
a006 = a008 + a014;
cur = a017 - cur;
if (a010 < a001) {
a006 = a006 + a000;
a004 -= a005;
a003 = a013 - a006;
a017 -= a000;
} else {
a017 += a011;
a011 -= a019;
a014 += a016;
a003 += a008;
a009 -= a002;
a004 += a011;
a014 = a002 - a002;
}
a009 -= a010;
a014 += 0;
if (a015 < a000) {
a004 = a019 + a006;
a011 = a014 - a002;
a002 -= a016;
} else {
a017 += a005;
a016 -= a001;
}
a011 -= a007;
a019 -= a001;
a016 = a012 - a009;
if (a001 <= a010) {
cur += a019;
a010 -= a017;
a002 += a000;
cur += 1;
a007 = cur + 4;
a001 = a011 + 4;
a018 -= 3;
if (cur == a009) {
a010 -= a015;
} else {
a008 -= a009;
}
a019 -= a009;
a002 = a000 - -5;
cur -= a010;
a017 = a002 - a014;
a009 = -4 - a007;
a010 -= a004;
a019 = a006 + a018;
} else {
a000 -= a013;
a000 = a016 - a000;
}
a003 -= a005;
a011 -= a005;
a002 += a003;
a009 = a016 + -5;
a014 += a007;
a016 += a015;
a012 = a016 - a011;
if (a004 < a004) {
a007 = a004 - a016;
a004 = a001 - a004;
a000 -= a011;
cur = cur - a017;
a015 -= 1;
if (a001 >= a012) {
a013 -= a003;
a002 -= 4;
a009 += a000;
if (a009 > cur) {
a008 = a007 - a017;
} else {
a012 += a015;
cur -= a018;
a017 = a017 + a009;
a011 = cur + a010;
a019 = a007 + a018;
a018 = a008 + a018;
a012 -= a015;
}
if (a015 == a008) {
a012 += a017;
if (a008 < a013) {
cur += a001;
a015 = a006 + a004;
a015 = a007 + a018;
a000 -= a010;
a001 -= a004;
a017 = a006 - a005;
if (a015 == a001) {
a013 = -5 - a018;
a002 = a011 - 1;
a005 -= a002;
} else {
a016 += a006;
a004 -= a019;
a006 -= a002;
}
a005 = a001 - a011;
a005 -= a005;
a018 += a016;
a000 = a003 - a001;
a014 = a011 - a006;
if (a006 > a017) {
a005 -= cur;
cur += cur;
a004 = -5 - a012;
} else {
a016 = a018 + a009;
a002 = a010 - 0;
a007 -= a009;
}
a002 += a004;
a004 = a016 - a018;
a003 = a004 - a011;
a009 -= cur;
a015 += a013;
a015 -= a006;
if (a001 == a014) {
a009 -= a006;
a007 -= a001;
a005 = a018 - a007;
a005 = a011 - a013;
a014 = cur - a015;
a015 = a007 + a009;
} else {
a004 -= a010;
a011 = a008 + cur;
a003 -= a008;
}
a000 = a002 + a011;
} else {
a002 += a017;
a011 -= a014;
a002 += a010;
if (a010 <= a002) {
a019 = cur + a011;
a019 = a002 - a011;
a004 += a001;
a007 = a018 + a014;
a011 = a015 + a006;
if (a008 < a005) {
a002 = 1 + a013;
a014 += a003;
a000 -= a010;
a000 -= a012;
a019 -= a007;
a017 = a002 + a014;
if (a019 >= a002) {
a016 += a001;
a000 = a018 + a005;
if (a003 != a004) {
a000 += a005;
a006 = a001 + a006;
} else {
a009 = a014 + a004;
}
a001 = a013 - a009;
a010 -= a014;
a015 = a004 + a002;
a006 += a008;
a003 -= a014;
a015 = a005 - a002;
a015 += a000;
if (a006 < a005) {
a013 -= a015;
a007 -= a000;
} else {
a012 = a003 - a006;
a012 -= a002;
a003 -= a008;
}
a013 -= a011;
a014 = a008 - a002;
a019 = a010 + a013;
a004 = a012 + a005;
} else {
a018 -= a001;
a013 += a019;
a001 += a004;
cur = a013 - a007;
a001 -= a017;
a016 = -1 - a013;
}
cur = a000 - a011;
a006 += a006;
a005 = a017 - a006;
a004 += -5;
} else {
cur = a019 + a019;
}
a017 += a019;
a014 += a002;
a011 = a015 + 2;
a002 += 0;
a010 += a016;
a009 = a012 + a012;
} else {
}
cur = a003 * -1;
a013 = a004 - a007;
cur -= a012;
a015 = a009 - a007;
a001 += a002;
}
a009 = a003 + a001;
a001 = a003 - a009;
a005 = a018 - a003;
} else {
}
a007 = a002 + a004;
} else {
}
} else {
}
}
a015 += a001;
}
output.collect(prefix, new IntWritable(a012));
}
