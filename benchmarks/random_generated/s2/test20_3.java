// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a007 = a002 - a011;
a016 += a008;
a005 -= a016;
a001 -= a014;
if (a019 >= a006) {
a005 -= a016;
a004 += a001;
a019 = a000 + a018;
a019 -= a004;
a003 = a010 - a011;
a006 -= a016;
if (a014 != cur) {
a001 -= a005;
if (a000 == a016) {
if (a017 != a015) {
a015 += a012;
if (a014 <= a014) {
a015 -= cur;
a015 -= 1;
a008 -= a013;
a011 -= a012;
a007 = a014 + a004;
a001 = a011 + a010;
a002 = a016 - a008;
} else {
a019 = cur - -1;
a012 -= a011;
a017 -= a010;
a010 = a017 + a015;
a000 = a005 - a012;
a016 += a018;
if (a019 == a003) {
a015 = a004 + a018;
a017 = a018 - a010;
a012 = a004 - a016;
if (a012 == a010) {
a009 += a011;
a014 = a000 + a010;
a002 += a019;
a012 -= a019;
a002 = a008 - a000;
a002 += a010;
} else {
a002 -= a016;
if (a016 < a002) {
a000 = a009 - a002;
if (a011 < a019) {
if (a005 >= a014) {
a017 = a011 + a003;
a003 = a002 + a006;
if (a016 < a017) {
a018 += a013;
a004 -= a017;
a004 += a016;
a002 -= a016;
a005 -= a003;
} else {
a001 -= 4;
a006 += a004;
if (a012 >= a000) {
a000 -= a004;
a012 -= -3;
a012 = a019 + a000;
a003 = a015 * 3;
a015 = a013 + a001;
if (a016 == a000) {
a005 += a015;
a015 += a016;
} else {
a019 = 2 - a001;
a011 = a017 - a005;
}
a018 -= a006;
a009 -= a018;
a015 = a004 + a005;
a009 = a013 + a005;
a002 -= a002;
a019 -= a001;
a002 += a019;
} else {
a002 += a011;
a005 = a010 + a018;
a019 = a003 - a002;
a000 += a014;
a012 -= a016;
a000 += a002;
}
a008 += a017;
a016 = a008 + a014;
a006 += a000;
a014 -= -1;
cur = cur + a013;
}
a013 -= a019;
a008 -= a011;
a005 = a018 + a003;
a002 -= a002;
a005 = a017 * -4;
a010 -= a019;
} else {
a001 += a014;
a005 -= a002;
a001 = a003 + a003;
}
a005 = a007 - a000;
a003 += a002;
a004 += a007;
if (a012 != a019) {
} else {
a015 = a013 - a010;
a009 += a002;
a013 += a003;
a013 = a019 - a009;
a013 = a004 + a014;
a014 = a001 + a008;
}
a015 += a016;
if (a018 > a007) {
a013 += a010;
a009 -= a002;
a004 += a014;
a002 = a010 - a004;
} else {
}
a000 -= a006;
a015 = cur - a001;
if (a011 < a005) {
a010 = a003 + a014;
a006 = a008 + a013;
a012 = a006 - a015;
a000 = a014 - a008;
} else {
if (a019 > a013) {
a013 = a018 + a002;
a016 += a017;
if (a008 == a019) {
a004 += a018;
if (a003 >= a009) {
a001 -= a013;
a005 -= a009;
a003 = a016 + a015;
a004 += a008;
a007 = a012 + cur;
} else {
a011 = a007 + a017;
a011 += a016;
a007 = a011 - a019;
}
a013 += a007;
a019 -= a015;
a010 -= -5;
a016 += a016;
a005 = a013 + a003;
} else {
a017 += a009;
a001 += a000;
a017 = -4 + a000;
a015 -= cur;
a000 -= a003;
a014 += a005;
if (a017 < a010) {
a006 -= a018;
a011 = a008 - a002;
} else {
a008 -= a007;
a015 -= a005;
}
a002 = a012 - a012;
a008 = a004 + cur;
a010 = a015 + 0;
a016 = a002 - cur;
a017 = a012 - cur;
a016 += a018;
a002 = a016 - a004;
}
a013 = a005 + a015;
a005 += a000;
a003 -= a017;
a012 = a019 - a011;
} else {
a013 += a014;
a014 = a006 - a004;
a004 += a006;
a000 += a008;
a008 -= a010;
a007 = a012 - a010;
}
a000 = a008 + cur;
a017 += a013;
a000 += a000;
a014 -= a007;
}
a003 = a007 + a008;
a004 = a002 - a018;
} else {
}
a014 += a005;
a010 -= a013;
a011 = a009 + a018;
a005 = a015 + a004;
cur = a002 - a015;
a008 = a018 - a009;
} else {
a003 += a018;
a003 = 2 - a008;
a013 += a011;
a013 = a016 + a003;
}
a000 = a011 + a005;
a017 = a005 - a003;
a018 = a001 - a019;
}
a010 -= -2;
a015 += a001;
} else {
a001 = a004 - cur;
a001 = a013 + a003;
a012 = a005 - a002;
a015 += a019;
a015 = a006 + cur;
}
a017 = a009 - a007;
a004 += a009;
a015 -= a006;
}
a016 = a010 - a002;
a004 -= a014;
a017 += a009;
a008 = a004 + a017;
cur -= a009;
a011 = a013 - a007;
} else {
a017 = a013 + a001;
a007 += a013;
}
a012 = a015 + a009;
a008 = a007 - a008;
a007 -= 3;
a001 -= a005;
} else {
a012 += a006;
a016 += a008;
a017 = a004 + a006;
a010 = a019 - a008;
}
a017 -= a014;
a002 -= a008;
a007 += a018;
a008 -= a017;
a015 = a018 + a001;
} else {
a013 = a013 - a007;
a018 = a000 + a019;
a018 -= a004;
}
a009 = a007 - a006;
} else {
}
a003 = cur + a012;
a019 += a003;
}
output.collect(prefix, new IntWritable(a015));
}
