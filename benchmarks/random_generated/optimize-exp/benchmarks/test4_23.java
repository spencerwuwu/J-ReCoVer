// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 4

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
cur = a004 + a012;
cur -= a014;
a001 -= cur;
a002 -= a019;
a004 = a002 - a010;
a013 += a012;
a001 += a011;
a000 += a004;
a004 = a006 + -5;
a000 = a006 + a019;
a000 = a008 + a009;
a006 = a007 - a012;
a008 = a013 - a003;
a016 = a008 - a007;
a012 += a006;
a012 = a011 + cur;
a008 = a009 + a000;
a015 -= a014;
a005 = a010 - a009;
a016 = a018 - a001;
a004 += cur;
a014 -= a002;
a003 = a011 - a012;
a000 = a015 - a010;
a002 -= a008;
a006 = 1 + a015;
a014 += a006;
a013 -= 4;
a018 = a019 + a011;
a009 = a006 - a005;
a017 -= a019;
a009 = a019 - -3;
if (a007 != a016) {
a012 += a001;
cur -= a004;
a005 += a003;
cur -= a015;
a003 = a015 + a012;
a005 = cur - a006;
a008 = a004 - cur;
a014 -= a005;
a001 = a014 + a006;
if (a014 != a007) {
a014 = a001 + a017;
a000 = cur + a002;
a004 = a001 - a003;
a016 = a002 - a002;
a014 = a002 - a019;
a014 = a010 - -3;
a018 += a018;
a017 = a000 - a007;
a008 -= a009;
a015 = a016 + a005;
a012 += a009;
a009 = a008 - a013;
a013 += a013;
a000 -= a008;
a008 += a015;
a018 += a001;
a007 = a003 + a019;
a012 -= 0;
a008 += 4;
a005 = a000 - a006;
cur = a014 + a012;
cur = a012 + a014;
a010 -= a015;
a013 = -2 - a016;
a003 += a005;
a016 = a008 + a010;
a017 -= a001;
a016 = a009 - a002;
a013 = -2 + a011;
a015 -= a009;
a001 = a005 + -3;
} else {
a018 = a000 + a019;
a008 -= a000;
a002 = 0 + a000;
a019 = a002 + 1;
a012 -= a002;
a019 += cur;
a015 = a019 + cur;
a013 -= a015;
a001 = a014 - a011;
a006 = a006 - a008;
a008 -= a005;
a015 = cur - a007;
cur -= a001;
a010 -= a013;
a008 += a008;
a011 += a005;
a000 = a017 + a019;
a001 -= a010;
a013 = a009 - a018;
if (a001 > a016) {
cur -= a018;
a005 = a009 - a003;
a009 = a007 - a005;
a015 -= a001;
a008 += a014;
a010 = a009 + a004;
a008 = a000 - a001;
if (a007 != a019) {
a010 += a014;
a011 = a009 + a007;
a015 += a015;
cur -= a012;
a011 = cur + a006;
a004 = a017 - a004;
a013 += a016;
a006 -= cur;
a009 = a015 - a008;
a009 = a017 + a000;
a009 = a014 + a003;
a016 = a007 - a016;
a012 = a002 + a002;
a016 += a008;
a018 = a016 + a013;
a015 = a012 + a011;
a015 = a018 - 4;
a012 = a007 - a000;
a014 = a004 - a010;
a017 = a009 + -1;
a005 += a003;
a010 -= a006;
a012 = a014 - a002;
a003 = a007 + a009;
a002 = a013 - a004;
a019 -= a014;
a017 -= 3;
a011 -= a017;
} else {
a016 = cur + a004;
a003 = a010 - a005;
a013 += a010;
a005 -= a002;
a019 -= cur;
a012 += 1;
cur -= a005;
a012 -= a003;
a011 = a002 + a011;
a017 -= a009;
a009 = a014 - a004;
a004 += a000;
cur = a015 + a014;
a006 = a018 - a004;
a009 = a019 - a002;
cur -= a014;
a017 = a007 * 2;
a019 -= a019;
a009 = a018 - a016;
a004 = a017 - a018;
a006 += a009;
a016 -= a019;
a012 = a003 - a005;
a012 -= a016;
a012 = a006 - a018;
a000 = -3 - a017;
a004 -= a009;
cur -= a007;
}
a007 = a008 - a004;
a001 -= a017;
a000 -= a013;
a001 = a007 + a018;
a018 += a012;
a009 = a005 - a008;
a012 = a004 - a001;
a000 -= a019;
a009 = -5 - a013;
a002 = a000 * -3;
a018 += a007;
a017 -= a018;
a005 = a015 - a007;
a012 = a009 + a011;
a013 = 3 + a009;
a017 = a008 - cur;
cur -= a006;
a011 = a013 - a003;
a008 = a005 + a013;
a012 = a007 - -5;
} else {
a008 = a000 + a004;
a006 += a011;
a001 = a011 + a010;
a001 = a001 + a003;
a007 -= a010;
a007 -= 0;
a003 = a012 - a011;
a013 = a003 - a008;
a003 = a008 - a000;
a012 = a011 + a011;
a006 = a016 - a013;
a017 = cur - a000;
a008 += a011;
a011 = a010 + a017;
a006 -= cur;
a016 = a000 - cur;
a004 = a003 - a019;
a018 = a005 + cur;
a016 = a013 * 4;
a016 += a009;
a005 = a015 - a007;
a006 = a010 - a014;
a005 = a014 - a018;
a014 = a007 + a012;
}
}
a004 = a012 + a010;
} else {
}
cur = -1 + a007;
}
output.collect(prefix, new IntWritable(a011));
}
