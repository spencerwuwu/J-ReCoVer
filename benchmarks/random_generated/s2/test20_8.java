// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 20

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a007 = a010 + a017;
a002 = a004 - a002;
if (a006 < a005) {
a016 = a008 - a000;
} else {
a015 += a009;
a015 = -4 - 0;
a002 -= a000;
}
a014 = a008 + a012;
a002 += a018;
a010 = a015 + a004;
a005 -= a019;
a005 -= cur;
a002 = a006 + a000;
a013 = a004 - a010;
if (a014 <= a016) {
a003 -= a019;
} else {
if (a007 > a014) {
a009 += a012;
a000 = a019 + a013;
a019 += a005;
a018 -= a003;
a007 = a019 + a014;
a017 = a012 - a019;
} else {
a016 = a006 + a008;
a000 += a002;
a008 = a010 - -4;
a005 = a011 + a006;
a013 -= cur;
a015 = a005 + a010;
cur = a002 + a014;
if (a007 == a016) {
a015 = a007 + a005;
a011 -= a007;
a013 = a011 - a010;
a016 = a009 + a001;
a004 += a014;
} else {
a003 = a017 + 0;
a013 -= a004;
a009 = 1 + a011;
}
a019 = a004 - a000;
a014 += a013;
cur = a007 - a012;
}
a000 = -3 + a015;
a000 += a012;
if (a000 == a005) {
a018 -= a017;
if (a001 > a008) {
a002 = a005 + a010;
a018 -= a014;
a001 -= a013;
if (a017 > a007) {
if (a012 < a003) {
a008 = a004 + a012;
a009 = a004 + a001;
a003 = a008 - cur;
a011 = a001 + a009;
a015 -= a008;
a015 -= a007;
if (a000 >= a009) {
a007 -= a004;
a000 += a016;
} else {
a005 = a010 + a005;
a012 = a000 + a006;
a005 = a012 - a001;
a001 += a004;
a015 = a007 + a017;
a003 -= a017;
a005 = a013 - a001;
}
a011 += a016;
a018 = a014 - a005;
a004 = a004 + a010;
a013 = a006 + a012;
a009 = a017 - a007;
a012 -= a012;
} else {
a007 = a007 - a009;
a011 = a019 + a019;
a018 += a015;
a004 -= a003;
if (a014 == a008) {
a000 = a012 - a003;
a004 -= a000;
a018 = a015 + a016;
a017 += a009;
if (a004 > a016) {
if (a000 != a007) {
a002 = a007 - a005;
} else {
a002 -= a010;
a015 = a014 - a010;
a008 = a009 + a000;
a016 = a013 - a019;
a016 += a014;
a017 = a008 + a004;
if (a016 != a009) {
a016 += cur;
cur -= a010;
a004 += a012;
if (a000 != a015) {
a009 = a015 - a010;
a015 = a007 + a016;
a004 = a005 + a005;
a011 -= 2;
if (a000 < cur) {
a017 = a014 + cur;
a001 = a017 + a000;
cur += 4;
a015 -= a007;
a005 = a003 - a002;
if (a006 == a002) {
a015 -= a011;
a013 += a002;
a012 -= a008;
a011 -= a017;
a014 = a007 - a007;
a003 -= a000;
a017 += a008;
if (a005 <= -4) {
a006 = a009 - a004;
a006 = a015 + a009;
a019 += cur;
a009 -= a009;
if (cur > a002) {
} else {
a006 += a009;
a009 = 2 + a017;
a013 += a018;
if (a014 > cur) {
a001 -= a001;
a004 -= a017;
a006 = a011 + a015;
a003 -= a008;
a018 += a002;
a019 = a017 - a007;
a014 -= a012;
} else {
a019 -= a017;
a016 = -3 - a004;
a000 = a007 - a015;
a004 = a005 + a004;
cur += a004;
a015 = a018 - a014;
}
a001 = a019 + a009;
a018 += a011;
a004 -= a013;
if (a010 > a018) {
a006 -= a013;
a001 = a000 + a005;
a012 = 0 - 2;
a001 += a015;
a004 = a006 + a003;
a005 += a003;
} else {
a012 = a015 + a004;
a015 = a014 - a009;
a018 = a010 + a001;
a015 = a017 + a011;
}
a012 = a009 + a003;
a000 = a005 + a005;
a008 += -2;
a015 -= a017;
}
a007 -= a017;
a011 = a012 + a015;
a014 = a010 + a014;
a019 -= a016;
} else {
a012 = a009 - a004;
a008 += a002;
cur += a014;
a018 -= a012;
}
a019 = a013 - a006;
a009 = a002 + a009;
a017 = a008 + a001;
cur = a000 + a011;
} else {
a019 = a010 - a004;
a003 -= a018;
a018 = -1 - a008;
a013 = a013 + a010;
a011 -= a010;
}
cur += a018;
a001 = a009 - a009;
a003 = a016 - a016;
a000 += a019;
a017 = a013 + a004;
a012 = a008 - a001;
} else {
a002 -= a007;
a017 -= a018;
a009 = a009 - a004;
a011 += a012;
a011 = a001 + a016;
a003 = a015 + a011;
}
} else {
a001 = 3 - a011;
a018 -= a002;
a017 = a018 + a008;
a008 = a003 - a018;
a016 = a008 - a011;
a012 += a008;
a019 += a019;
}
cur += cur;
a019 += a013;
a001 -= a014;
a008 = a005 + a000;
a012 += a014;
a001 += a006;
a015 = a009 - a004;
} else {
a005 += a014;
a019 = a001 + a007;
a011 = a011 - a013;
a010 += a014;
a016 = a003 + a001;
a005 = a017 - a014;
}
}
a019 += a012;
a014 = a015 - a017;
a019 = 4 + a017;
a011 = a012 - a010;
a016 = a002 - a003;
a004 = a007 - a013;
} else {
a009 -= a003;
}
cur = cur + a006;
a016 = a019 + a001;
} else {
a001 -= a016;
a015 -= cur;
a005 -= a003;
a017 += a015;
a001 = a001 + a011;
a004 -= a008;
}
}
} else {
}
} else {
}
} else {
}
}
}
output.collect(prefix, new IntWritable(a009));
}
