// Note: only +, - operations
// Parameters:
//   Variables:   25
//   Baselines:   250
//   If-Branches: 5

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int a020 = 0;
int a021 = 0;
int a022 = 0;
int a023 = 0;
int a024 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a009 = a023 + a008;
a016 += a010;
a012 -= a006;
a005 = a000 + a023;
a018 -= a018;
a019 = a023 + a009;
a010 = a022 - a015;
if (a014 == a011) {
a007 -= a024;
a011 = a024 - a016;
a018 -= a023;
a000 = a002 - a016;
a005 = a005 - a010;
a010 += a022;
a015 -= a008;
a007 = a015 + a011;
a001 -= a008;
a005 -= a008;
a012 -= a016;
a009 += a007;
a023 = a001 + a012;
a008 = a005 - a007;
a004 = a011 + a013;
a002 += a018;
cur = a016 - a024;
a005 = a020 - a002;
a008 -= a004;
a019 = a024 - a016;
a017 = -2 + a002;
} else {
a006 += a022;
a002 = a006 - a001;
a001 -= a019;
a017 = a021 - a005;
a012 -= a000;
}
a019 = a012 - a017;
a000 += a009;
a020 = a022 + a013;
a004 += a003;
a001 = a015 + cur;
a014 += a019;
a017 -= a013;
a004 = a017 + a002;
a000 = a007 + a007;
a000 = a022 - a019;
a001 = a002 - a017;
a016 = a013 - a021;
a004 = a024 + a003;
a009 -= a012;
a013 += a015;
a006 += a001;
a003 += 0;
a000 += a022;
a009 = a023 + a018;
a014 += a014;
a016 = a013 - a005;
a009 = a001 - a024;
a008 += a013;
a000 = a004 - a001;
a005 -= a023;
a020 = -1 - a014;
a018 = a006 + a022;
a012 = a008 + 1;
if (a023 == a001) {
a018 = a010 - a021;
a013 = a022 + a012;
a007 += a000;
a014 -= a004;
a005 += a000;
a022 = a015 - a010;
a022 -= a002;
a003 -= a018;
a011 += a002;
a023 -= a001;
a021 += a006;
a005 -= a022;
a016 = a022 - a013;
a022 = a006 - -3;
a011 = a006 - a018;
a009 += a021;
} else {
a012 -= a008;
a019 = a006 - a021;
a017 -= a014;
a003 += a017;
a015 = a011 - a011;
a023 -= a007;
a019 += a012;
a024 = a012 + cur;
a013 -= a003;
a021 -= a010;
a019 = -3 + a023;
a002 = a004 + a022;
a007 = a010 - a005;
a007 = a018 - a016;
a001 = a001 - a008;
cur = a000 - a015;
a001 = a019 * 4;
a009 = a024 + cur;
a020 = a022 + a000;
a011 = a001 - a022;
a002 -= a015;
a024 -= a011;
a005 = a014 - 1;
a010 += a021;
a005 = a021 - a002;
a002 = a003 - a006;
a011 += a003;
if (a021 >= a019) {
a019 = a015 - a013;
a015 += a008;
a023 -= a005;
a005 = a011 - a015;
a014 = a020 - a002;
a017 += a018;
a000 = -3 - a016;
a005 = a001 + a020;
a015 = a002 + a016;
a012 -= a012;
a008 -= a020;
a006 -= a013;
a012 += a007;
a006 += a018;
a023 += a002;
a008 += a024;
a020 = a011 + a007;
a010 = a014 + a015;
} else {
a008 += a023;
a018 += a022;
a011 += a003;
a003 = cur - a020;
a016 -= a014;
a021 = a017 + a013;
a011 = a005 + a007;
a008 = a024 + a023;
a018 -= a011;
a003 = a003 + a016;
a004 = a000 + a022;
a002 += a019;
a015 = a022 - a000;
a023 = a000 + a000;
a002 += a024;
a005 = a005 + a003;
cur = a011 - 2;
cur = -5 + a011;
a003 = a004 + a020;
a016 -= a017;
a016 = a023 + a013;
a010 = a002 + a021;
if (a024 > a002) {
a006 = a024 + a009;
a018 -= a018;
a000 -= a014;
a004 += a018;
a021 -= a023;
a015 = a010 + a003;
a010 = a022 + a023;
a006 = a004 - a003;
a000 = a002 - a016;
a019 -= a019;
a019 = a021 + a001;
a007 = cur - a016;
a024 = a003 - a022;
a018 = a017 - a009;
a006 = a002 - a012;
} else {
a024 -= a001;
a002 = -5 - a013;
a003 += a000;
a014 -= a020;
if (a004 <= a004) {
a023 = a002 - a000;
a011 -= a021;
a003 -= a021;
} else {
a014 += a005;
a004 = -2 + a017;
a020 -= cur;
a004 = a002 + a001;
a007 -= a019;
a004 = a011 - a005;
a009 = a006 - a023;
a003 = a013 - a018;
a007 += a021;
a007 += a014;
a022 = a019 + a013;
a018 += a005;
a023 = cur + a022;
a008 = -4 - a012;
a021 = a016 + -5;
a005 = a004 + a002;
a023 -= a015;
a015 -= a010;
a018 += a023;
a015 = a010 + a010;
a012 = a024 - a021;
a020 = a006 - a024;
a006 = 0 + a004;
a008 -= a018;
}
a020 -= a022;
a002 = a014 - a019;
a008 = a002 + cur;
a010 -= a021;
a005 = a014 + a018;
a024 = a002 - a021;
a008 = a020 - a000;
a006 += a003;
a001 += a019;
}
a015 = a021 - a002;
a021 = a010 * -4;
a019 += a017;
a024 -= a020;
a021 += a009;
a002 -= a013;
a019 += a005;
a016 = a014 * -3;
a024 = a007 + a012;
a004 = a021 + a004;
a019 = a021 + a006;
a005 = a008 + a018;
a001 = a012 + a013;
a017 -= a004;
a014 -= a023;
a020 = a007 - a022;
a006 = a000 + a003;
}
cur -= a005;
a002 = a000 + a011;
a015 = a021 + a007;
a009 = a015 + a016;
a011 = a013 - a010;
a013 -= cur;
a000 = a002 - a020;
a006 -= -4;
a007 += a024;
a014 += a020;
a020 -= a011;
a018 -= a014;
a006 = a006 - a001;
a014 = a000 - a008;
a004 = a008 + a011;
}
a007 = a010 + a024;
a020 -= a000;
a003 -= 2;
a004 += a024;
a016 += a012;
a017 = a018 - -1;
a003 = a004 - a008;
a015 = a000 + a007;
a004 = a016 + a005;
a016 -= a024;
a010 -= cur;
a009 += a019;
a009 = a002 - a005;
a018 += a000;
a018 += a013;
a022 = a004 - a013;
a012 += a024;
a000 = a014 + a016;
a007 = a021 + a005;
}
output.collect(prefix, new IntWritable(a009));
}
