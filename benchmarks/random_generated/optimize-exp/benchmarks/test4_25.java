// Note: only +, - operations
// Parameters:
//   Variables:   20
//   Baselines:   200
//   If-Branches: 4

public void reduce(Text prefix, Iterator<IntWritable> iter,
         OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
int a000 = 0;
int a001 = 0;
int a002 = 0;
int a003 = 0;
int a004 = 0;
int a005 = 0;
int a006 = 0;
int a007 = 0;
int a008 = 0;
int a009 = 0;
int a010 = 0;
int a011 = 0;
int a012 = 0;
int a013 = 0;
int a014 = 0;
int a015 = 0;
int a016 = 0;
int a017 = 0;
int a018 = 0;
int a019 = 0;
int cur = 0;

while (iter.hasNext()) {
cur = iter.next().get();
a010 = a001 + a000;
a009 = a017 - a017;
a016 += a001;
a011 = a014 + -3;
a000 = a002 + a015;
a006 += a003;
cur += a000;
a008 = a004 + a000;
a015 -= a014;
a015 -= a002;
a013 -= a005;
a008 -= a010;
a007 = a018 + a001;
if (cur != a011) {
a014 = a003 + a018;
a001 = a015 + a018;
a007 -= cur;
a003 = a011 + a009;
a001 = a001 + a013;
a003 -= a019;
a019 += a018;
a019 = 2 - a000;
a000 += a019;
a013 = a019 - a015;
a013 = a018 + a015;
a017 = a006 + a011;
a004 = a019 + a011;
a003 = a012 - a017;
a015 -= a011;
a015 += a016;
a017 -= a000;
a001 = a005 + a018;
a018 = 0 + a005;
a010 = a009 + a016;
a009 += a004;
a016 = a013 + a000;
a006 = a011 + a013;
a000 += a010;
a018 += a013;
a001 = a001 + a014;
a005 = a001 + a013;
a013 = a007 - a007;
a014 -= a011;
a014 += a011;
} else {
a003 -= a007;
a008 += a011;
a002 = a000 + a018;
a016 += a008;
cur = cur + a001;
a016 -= a010;
a014 -= a011;
a011 += a016;
a005 = a001 + a016;
a009 = cur + -4;
a002 = a014 + a012;
}
a001 -= a003;
cur = a009 - a002;
a001 -= a010;
a018 -= a008;
a019 += 3;
a019 -= a014;
a012 += a000;
a011 = a000 - 4;
a006 = a009 + a012;
a004 += a011;
a005 = a018 - a007;
a013 = a013 - a012;
a015 = a018 + a000;
a014 += a003;
a000 += a009;
a004 -= a019;
a006 = a012 - a005;
a013 -= a002;
a014 = a015 - a003;
a012 = a005 - a016;
a016 = a017 - a012;
a002 += a015;
a001 = a017 + a000;
a009 = a001 - a012;
if (a014 <= a016) {
a019 -= cur;
a005 -= a012;
a009 += a007;
a010 = -4 + a007;
a010 += a009;
a002 = a002 - 2;
a005 -= 4;
a000 = a003 + a011;
a004 += a015;
a019 = a018 + a012;
a015 = a005 + a018;
a002 = a002 + a003;
a010 += a019;
a000 = a000 + a001;
a009 += a018;
a008 -= a001;
a006 += a005;
a019 = a003 - a014;
a015 = a000 + a006;
} else {
a002 = cur - a003;
a008 -= a018;
a011 -= a013;
}
a017 = a001 + a000;
a017 -= a010;
a019 = a003 + a010;
a003 = 3 + a015;
a010 += a007;
a010 += a014;
a009 -= a001;
cur += a011;
a008 -= a004;
a014 = a007 + a018;
a017 = a008 + a005;
a008 += a014;
a005 += a004;
a001 = a002 - a009;
a013 += a012;
a019 = a003 - a008;
a008 -= a006;
a006 = a011 - a015;
a002 = a019 - a008;
a018 -= a010;
a017 = a005 + -5;
a009 = a016 + a014;
a005 += a015;
a007 = a006 - a016;
a008 -= a014;
a004 -= a010;
a008 = a001 + a010;
if (a018 < a009) {
a009 += a017;
cur = a014 - a011;
a017 += a003;
a014 += a013;
a012 = a009 - a003;
a004 -= a016;
a019 = a017 - a011;
a008 += cur;
a007 = a017 - a005;
if (a019 != a001) {
a015 = a007 - a008;
a010 -= a008;
a014 = a002 - a012;
a006 = a004 - a016;
a003 = a013 + a018;
cur = a000 - cur;
a005 = a012 - a009;
a016 -= a009;
a011 += a011;
a009 = a019 - a003;
a013 -= a007;
a014 = a012 + a014;
a003 += a018;
a007 -= a005;
a010 -= a006;
a010 -= a015;
} else {
a011 = a007 + a006;
a014 -= a013;
a014 = cur - a010;
a000 = a013 + a013;
a008 = a009 - -5;
a005 = a008 - a002;
a016 = a013 - a019;
a013 += a018;
a018 += a008;
a009 -= a012;
a011 = a019 + a000;
a010 -= a015;
a005 = a002 - a003;
a018 += a009;
a007 = a005 - a019;
a006 += a000;
a001 -= a004;
a014 += a010;
a009 -= a005;
}
a002 -= a002;
a010 = a007 + a018;
a017 = a000 - 0;
a010 -= a014;
a016 -= a018;
a005 = a002 - a014;
a005 = a015 - a006;
a005 = a007 - a013;
a012 -= a018;
a002 = a008 * 3;
a018 = a004 - a010;
} else {
a018 += a019;
a005 = a000 + a000;
a018 -= a000;
a007 = -3 - a018;
a005 += a001;
a010 -= a005;
}
a014 = a010 - a019;
a012 = a000 - a000;
a019 = a010 + a014;
a002 += -5;
a005 += a003;
a017 = a010 - 3;
a012 = a015 * -3;
a000 = a003 + a003;
a002 += a006;
a018 = a014 + a015;
a012 -= a003;
a006 = a001 - a008;
}
output.collect(prefix, new IntWritable(a018));
}
